{
	"swagger": "2.0",
	"info": {
		"description": "NGS deployed rest endpoints",
		"version": "10.0.0-SNAPSHOT",
		"termsOfService": "NextGate software is commercially licensed and is not available in Open Source form.",
		"contact": {
			"name": "NextGate",
			"email": "support@nextgate.com"
		},
		"license": {
			"name": "NextGate Solutions, Inc.",
			"url": "http://www.nextgate.com"
		}
	},
	"basePath": "/ws",
	"tags": [{
		"name": "Codemap Manager"
	}, {
		"name": "Codemap Manager with tenant support"
	}, {
		"name": "Codeset Manager"
	}, {
		"name": "Codeset Manager with tenant support"
	}, {
		"name": "Healthbroker Service"
	}, {
		"name": "NGMS Error Resubmit Adapter"
	}, {
		"name": "NGMS Event Collector"
	}, {
		"name": "NGMS Event Collector with tenant support"
	}, {
		"name": "NGMS Event Notifier"
	}, {
		"name": "NGMS Event Notifier with tenant support"
	}, {
		"name": "NGMS FHIR Adapter - Patient"
	}, {
		"name": "NGMS FHIR Adapter - Practitioner"
	}, {
		"name": "NGMS REST Message Submit Adapter"
	}, {
		"name": "Node Manager"
	}],
	"paths": {
		"/codemap/appinfo": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the Codemap Manager Service application information",
				"description": "",
				"operationId": "getAppInfo_4",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/definitions": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the response structure definitions supplied from Codemap Manager",
				"description": "",
				"operationId": "getDefinitionsAll_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/FieldDefinitionType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/definitions/{structure}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the response structure definition(s) supplied from Codemap Manager",
				"description": "",
				"operationId": "getDefinitions_7",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["Codemap", "CodemapSet", "All"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/FieldDefinitionType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/flushcache": {
			"put": {
				"tags": ["Codemap Manager"],
				"summary": "Flush the Codemap Service's internal cache",
				"description": "",
				"operationId": "flushCache_2",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.flushCache"
				}
			}
		},
		"/codemap/map": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the individual Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemap_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "codemapSetId",
					"in": "query",
					"description": "The Codemap Set record id [leave out when using 'names']",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "sourceAA",
					"in": "query",
					"description": "The Source Assigning Authority namespace [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "The Source Codeset name [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "destAA",
					"in": "query",
					"description": "The Destination Assigning Authority namespace [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "query",
					"description": "The Destination Codeset name [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "sourceCode",
					"in": "query",
					"description": "The Source Code",
					"required": true,
					"type": "string"
				}, {
					"name": "destCode",
					"in": "query",
					"description": "The Destination Code",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/map/{id}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the individual Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemap_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codemap record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/maps": {
			"post": {
				"tags": ["Codemap Manager"],
				"summary": "Create a new Codemap",
				"description": "",
				"operationId": "createCodemap_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Codemap to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Codemap"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.createCodemap"
				}
			}
		},
		"/codemap/maps/{codemapSetId}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Retrieve all Codemaps for a given Codemap Set",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemaps_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "codemapSetId",
					"in": "path",
					"description": "The CodemapSet record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemaps"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/maps/{id}": {
			"put": {
				"tags": ["Codemap Manager"],
				"summary": "Updates an existing Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodemap_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codemap record id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Codemap details to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Codemap"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.updateCodemap"
				}
			},
			"delete": {
				"tags": ["Codemap Manager"],
				"summary": "Deletes an existing Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodemap_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codemap record id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.deleteCodemap"
				}
			}
		},
		"/codemap/mapsets": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Retrieves all CodemapSets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAllSets_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "sourceAAId",
					"in": "query",
					"description": "Source Assigning Authority record Id",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "destAAId",
					"in": "query",
					"description": "Destination Assigning Authority record Id",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "removeMaps",
					"in": "query",
					"description": "Remove the detailed maps from the return?",
					"required": false,
					"type": "boolean",
					"default": false
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CodemapSetType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/mapsets/{mapsetId}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Retrieves the specific maps for a CodemapSet id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getMapsBySetId_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "mapsetId",
					"in": "path",
					"description": "The CodemapSet record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "removeMaps",
					"in": "query",
					"description": "Remove the detailed maps from the return?",
					"required": false,
					"type": "boolean",
					"default": false
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSetType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/mapsets/{sourceAANamespace}/{sourceCodesetName}/{destAANamespace}/{destCodesetName}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Retrieves the specific maps between source and destination",
				"description": "",
				"operationId": "getMaps_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "sourceAANamespace",
					"in": "path",
					"description": "Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "path",
					"description": "Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "destAANamespace",
					"in": "path",
					"description": "Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "path",
					"description": "Destination Codeset name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSetType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/set": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the list CodemapSet(s) by query parameters (multiple)",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSet_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "sourceAA",
					"in": "query",
					"description": "The source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "The source Codeset name",
					"required": false,
					"type": "string"
				}, {
					"name": "destAA",
					"in": "query",
					"description": "The destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "query",
					"description": "The destination Codeset name",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/set/{id}": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the CodemapSet by its record id (exact)",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSet_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/sets": {
			"get": {
				"tags": ["Codemap Manager"],
				"summary": "Returns the list of CodemapSets for a given Assigning Authority and, opitional, source codeset name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSets_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "sourceAA",
					"in": "query",
					"description": "Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "Source Codeset name [emtpy = all]",
					"required": false,
					"type": "string",
					"allowEmptyValue": true
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CodemapSets"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codemap Manager"],
				"summary": "Create a new CodemapSet",
				"description": "",
				"operationId": "createCodemapSet_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new CodemapSet to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodemapSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.createCodemapSet"
				}
			}
		},
		"/codemap/sets/{id}": {
			"put": {
				"tags": ["Codemap Manager"],
				"summary": "Updates an existing CodemapSet",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodemapSet_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The CodemapSet details to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodemapSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.updateCodemapSet"
				}
			},
			"delete": {
				"tags": ["Codemap Manager"],
				"summary": "Deletes an existing CodemapSet",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodemapSet_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The CodemapSet was successfully deleted",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.deleteCodemapSet"
				}
			}
		},
		"/codemap/{tenant}/appinfo": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the Codemap Manager Service application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/definitions": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the response structure definitions supplied from Codemap Manager",
				"description": "",
				"operationId": "getDefinitionsAll",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/FieldDefinitionType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/definitions/{structure}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the response structure definition(s) supplied from Codemap Manager",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["Codemap", "CodemapSet", "All"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/FieldDefinitionType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/flushcache": {
			"put": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Flush the Codemap Service's internal cache",
				"description": "",
				"operationId": "flushCache",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.flushCache"
				}
			}
		},
		"/codemap/{tenant}/map": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the individual Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemap",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "codemapSetId",
					"in": "query",
					"description": "The Codemap Set record id [leave out when using 'names']",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "sourceAA",
					"in": "query",
					"description": "The Source Assigning Authority namespace [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "The Source Codeset name [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "destAA",
					"in": "query",
					"description": "The Destination Assigning Authority namespace [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "query",
					"description": "The Destination Codeset name [leave out when using 'codemapSetId' query parameter]",
					"required": false,
					"type": "string"
				}, {
					"name": "sourceCode",
					"in": "query",
					"description": "The Source Code",
					"required": true,
					"type": "string"
				}, {
					"name": "destCode",
					"in": "query",
					"description": "The Destination Code",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/map/{id}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the individual Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemap",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codemap record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/maps": {
			"post": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Create a new Codemap",
				"description": "",
				"operationId": "createCodemap",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Codemap to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Codemap"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.createCodemap"
				}
			}
		},
		"/codemap/{tenant}/maps/{codemapSetId}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Retrieve all Codemaps for a given Codemap Set",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemaps",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "codemapSetId",
					"in": "path",
					"description": "The CodemapSet record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemaps"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/maps/{id}": {
			"put": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Updates an existing Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodemap",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codemap record id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Codemap details to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Codemap"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.updateCodemap"
				}
			},
			"delete": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Deletes an existing Codemap",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodemap",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codemap record id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Codemap"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.deleteCodemap"
				}
			}
		},
		"/codemap/{tenant}/mapsets": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Retrieves all CodemapSets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAllSets",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "sourceAAId",
					"in": "query",
					"description": "Source Assigning Authority record Id",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "destAAId",
					"in": "query",
					"description": "Destination Assigning Authority record Id",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "removeMaps",
					"in": "query",
					"description": "Remove the detailed maps from the return?",
					"required": false,
					"type": "boolean",
					"default": false
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CodemapSetType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/mapsets/{mapsetId}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Retrieves the specific maps for a CodemapSet id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getMapsBySetId",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "mapsetId",
					"in": "path",
					"description": "The CodemapSet record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "removeMaps",
					"in": "query",
					"description": "Remove the detailed maps from the return?",
					"required": false,
					"type": "boolean",
					"default": false
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSetType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/mapsets/{sourceAANamespace}/{sourceCodesetName}/{destAANamespace}/{destCodesetName}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Retrieves the specific maps between source and destination",
				"description": "",
				"operationId": "getMaps",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "sourceAANamespace",
					"in": "path",
					"description": "Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "path",
					"description": "Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "destAANamespace",
					"in": "path",
					"description": "Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "path",
					"description": "Destination Codeset name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSetType"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/set": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the list CodemapSet(s) by query parameters (multiple)",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSet",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "sourceAA",
					"in": "query",
					"description": "The source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "The source Codeset name",
					"required": false,
					"type": "string"
				}, {
					"name": "destAA",
					"in": "query",
					"description": "The destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "destCodesetName",
					"in": "query",
					"description": "The destination Codeset name",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/set/{id}": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the CodemapSet by its record id (exact)",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSet",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codemap/{tenant}/sets": {
			"get": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Returns the list of CodemapSets for a given Assigning Authority and, opitional, source codeset name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodemapSets",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "sourceAA",
					"in": "query",
					"description": "Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "sourceCodesetName",
					"in": "query",
					"description": "Source Codeset name [emtpy = all]",
					"required": false,
					"type": "string",
					"allowEmptyValue": true
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CodemapSets"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Create a new CodemapSet",
				"description": "",
				"operationId": "createCodemapSet",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new CodemapSet to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodemapSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.createCodemapSet"
				}
			}
		},
		"/codemap/{tenant}/sets/{id}": {
			"put": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Updates an existing CodemapSet",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodemapSet",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The CodemapSet details to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodemapSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.updateCodemapSet"
				}
			},
			"delete": {
				"tags": ["Codemap Manager with tenant support"],
				"summary": "Deletes an existing CodemapSet",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodemapSet",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|set|sets|map|maps|flushcache|mapsets))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The CodemapSet record id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The CodemapSet was successfully deleted",
						"schema": {
							"$ref": "#/definitions/CodemapSet"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codemap.ws.CodemapService.deleteCodemapSet"
				}
			}
		},
		"/codeset/appinfo": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve the Codeset Manager Service application information",
				"description": "",
				"operationId": "getAppInfo_3",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthorities": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Assigning Authorities by namespace",
				"description": "",
				"operationId": "getAssigningAuthorities_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "codesetStatus",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthorities"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager"],
				"summary": "Create a new Assigning Authority",
				"description": "",
				"operationId": "addAssigningAuthority_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Assigning Authority record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/AssigningAuthority"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addAssigningAuthority"
				}
			}
		},
		"/codeset/assigningauthorities/{fromNamespace}/codesets/{name}/copyto/assigningauthorities/{toNamespace}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Copy an existing Codeset to a new Codeset by namespace",
				"description": "",
				"operationId": "copyCodeset_4",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "fromNamespace",
					"in": "path",
					"description": "The Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "toNamespace",
					"in": "path",
					"description": "The Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/assigningauthorities/{namespace}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Assigning Authorities by namespace",
				"description": "",
				"operationId": "getAssigningAuthorities_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "codesetStatus",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthorities"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthorities/{namespace}/codes": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve all Codes for an Assigning Authority namespace",
				"description": "",
				"operationId": "getAllCodes_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodesetFullList"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/assigningauthorities/{namespace}/codesets": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codesets by name",
				"description": "",
				"operationId": "getCodesetsByName_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager"],
				"summary": "Create a new Codeset using Assigning Authority namespace",
				"description": "",
				"operationId": "addCodesetByName_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Codeset record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCodesetByName"
				}
			}
		},
		"/codeset/assigningauthorities/{namespace}/codesets/{name}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codesets by name",
				"description": "",
				"operationId": "getCodesetsByName_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthorities/{namespace}/codesets/{name}/codes": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codes by Assigning Authority namespace and Codeset name",
				"description": "",
				"operationId": "getCodesetCodes_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager"],
				"summary": "Create a new Code by Assigning Authority namespace",
				"description": "",
				"operationId": "addCode_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCode"
				}
			}
		},
		"/codeset/assigningauthorities/{namespace}/codesets/{name}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Code by Assigning Authority namespace, Codeset name, and code",
				"description": "",
				"operationId": "getCodesetCode_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/assigningauthorities/{namespace}/codesets/{name}/codes/{id}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Updates an existing Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCode_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateCode"
				}
			}
		},
		"/codeset/assigningauthority/{fromId}/codesets/{name}/copyto/assigningauthority/{toId}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Copy an existing Codeset to a new Codeset by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset_3",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "fromId",
					"in": "path",
					"description": "The Source Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "toId",
					"in": "path",
					"description": "The Destination Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/assigningauthority/{id}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve an Assigning Authority by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAssigningAuthority_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Updates an existing Assigning Authority",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateAssigningAuthority_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Assigning Authority record to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/AssigningAuthority"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateAssigningAuthority"
				}
			},
			"delete": {
				"tags": ["Codeset Manager"],
				"summary": "Deletes an existing Assigning Authority",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteAssigningAuthority_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteAssigningAuthority"
				}
			}
		},
		"/codeset/assigningauthority/{id}/codes": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve all Codes for an Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAllCodes_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodesetFullList"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/assigningauthority/{id}/codesets": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codesets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetsById_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthority/{id}/codesets/{name}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codesets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetsById_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthority/{id}/codesets/{name}/codes": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codes by Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetCodes_3",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthority/{id}/codesets/{name}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codes by Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetCodes_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/assigningauthoritybyoid/{oid}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve an Assigning Authority by its OID",
				"description": "",
				"operationId": "getAssigningAuthorityByOID_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "oid",
					"in": "path",
					"description": "The Assigning Authority OID",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/code/{id}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve a Code by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCode_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			},
			"delete": {
				"tags": ["Codeset Manager"],
				"summary": "Deletes an existing Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCode_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteCode"
				}
			}
		},
		"/codeset/codes": {
			"post": {
				"tags": ["Codeset Manager"],
				"summary": "Create a new Code",
				"description": "",
				"operationId": "addCodeDirect_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCode"
				}
			}
		},
		"/codeset/codes/{id}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Update an existing Code by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodeDirect_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateCode"
				}
			}
		},
		"/codeset/codeset/{fromCodesetId}/copyto/assigningauthorities/{toNamespace}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Copy an existing Codeset to a new Codeset by Codeset record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "fromCodesetId",
					"in": "path",
					"description": "The Source Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "toNamespace",
					"in": "path",
					"description": "The Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/codeset/{fromCodesetId}/copyto/assigningauthority/{toAssigningAuthorityId}": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Copy an existing Codeset to a new Codeset by record Ids",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset_2",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "fromCodesetId",
					"in": "path",
					"description": "The Source Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "toAssigningAuthorityId",
					"in": "path",
					"description": "The Destination Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/codeset/{id}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve a Codeset by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodeset_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Updates an existing Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodeset_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Codeset record to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.udpateCodeset"
				}
			},
			"delete": {
				"tags": ["Codeset Manager"],
				"summary": "Deletes an existing Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodeset_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteCodeset"
				}
			}
		},
		"/codeset/codeset/{id}/codes": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codes for a Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodes_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/codeset/{id}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve Codes for a Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodes_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/codesets": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve all Codesets",
				"description": "",
				"operationId": "getAllCodesets_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager"],
				"summary": "Create a new Codeset",
				"description": "",
				"operationId": "addCodesetById_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Codeset record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCodesetById"
				}
			}
		},
		"/codeset/definitions": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Codeset Manager",
				"description": "",
				"operationId": "getDefinitions_6",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/definitions/{structure}": {
			"get": {
				"tags": ["Codeset Manager"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Codeset Manager",
				"description": "",
				"operationId": "getDefinitions_5",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "AssigningAuthority", "CodeSet", "Code"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/flushcache": {
			"put": {
				"tags": ["Codeset Manager"],
				"summary": "Flush the Codeset internal cache",
				"description": "The record id is returned from any list or get operation",
				"operationId": "flushCache_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.flushCache"
				}
			}
		},
		"/codeset/{tenant}/appinfo": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve the Codeset Manager Service application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthorities": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Assigning Authorities by namespace",
				"description": "",
				"operationId": "getAssigningAuthorities",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "codesetStatus",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthorities"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Create a new Assigning Authority",
				"description": "",
				"operationId": "addAssigningAuthority",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Assigning Authority record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/AssigningAuthority"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addAssigningAuthority"
				}
			}
		},
		"/codeset/{tenant}/assigningauthorities/{fromNamespace}/codesets/{name}/copyto/assigningauthorities/{toNamespace}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Copy an existing Codeset to a new Codeset by namespace",
				"description": "",
				"operationId": "copyCodeset",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "fromNamespace",
					"in": "path",
					"description": "The Source Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "toNamespace",
					"in": "path",
					"description": "The Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Assigning Authorities by namespace",
				"description": "",
				"operationId": "getAssigningAuthorities",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "codesetStatus",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthorities"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codes": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve all Codes for an Assigning Authority namespace",
				"description": "",
				"operationId": "getAllCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodesetFullList"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codesets": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codesets by name",
				"description": "",
				"operationId": "getCodesetsByName",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Create a new Codeset using Assigning Authority namespace",
				"description": "",
				"operationId": "addCodesetByName",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Codeset record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCodesetByName"
				}
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codesets/{name}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codesets by name",
				"description": "",
				"operationId": "getCodesetsByName",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codesets/{name}/codes": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codes by Assigning Authority namespace and Codeset name",
				"description": "",
				"operationId": "getCodesetCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Create a new Code by Assigning Authority namespace",
				"description": "",
				"operationId": "addCode",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCode"
				}
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codesets/{name}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Code by Assigning Authority namespace, Codeset name, and code",
				"description": "",
				"operationId": "getCodesetCode",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthorities/{namespace}/codesets/{name}/codes/{id}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Updates an existing Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCode",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "namespace",
					"in": "path",
					"description": "The Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateCode"
				}
			}
		},
		"/codeset/{tenant}/assigningauthority/{fromId}/codesets/{name}/copyto/assigningauthority/{toId}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Copy an existing Codeset to a new Codeset by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "fromId",
					"in": "path",
					"description": "The Source Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Source Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "toId",
					"in": "path",
					"description": "The Destination Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve an Assigning Authority by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAssigningAuthority",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Updates an existing Assigning Authority",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateAssigningAuthority",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Assigning Authority record to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/AssigningAuthority"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateAssigningAuthority"
				}
			},
			"delete": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Deletes an existing Assigning Authority",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteAssigningAuthority",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteAssigningAuthority"
				}
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}/codes": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve all Codes for an Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getAllCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodesetFullList"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}/codesets": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codesets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetsById",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}/codesets/{name}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codesets",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetsById",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}/codesets/{name}/codes": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codes by Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthority/{id}/codesets/{name}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codes by Assigning Authority record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodesetCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Codeset name",
					"required": true,
					"type": "string"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code",
					"required": true,
					"type": "string"
				}, {
					"name": "includeParents",
					"in": "query",
					"description": "Include parent Assigning Authorities in query?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/assigningauthoritybyoid/{oid}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve an Assigning Authority by its OID",
				"description": "",
				"operationId": "getAssigningAuthorityByOID",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "oid",
					"in": "path",
					"description": "The Assigning Authority OID",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AssigningAuthority"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/code/{id}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve a Code by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCode",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:View:Codeset.CodesetManager"]
				}]
			},
			"delete": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Deletes an existing Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCode",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteCode"
				}
			}
		},
		"/codeset/{tenant}/codes": {
			"post": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Create a new Code",
				"description": "",
				"operationId": "addCodeDirect",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCode"
				}
			}
		},
		"/codeset/{tenant}/codes/{id}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Update an existing Code by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodeDirect",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Code record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Code record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Code"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Code"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.updateCode"
				}
			}
		},
		"/codeset/{tenant}/codeset/{fromCodesetId}/copyto/assigningauthorities/{toNamespace}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Copy an existing Codeset to a new Codeset by Codeset record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "fromCodesetId",
					"in": "path",
					"description": "The Source Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "toNamespace",
					"in": "path",
					"description": "The Destination Assigning Authority namespace",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/{tenant}/codeset/{fromCodesetId}/copyto/assigningauthority/{toAssigningAuthorityId}": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Copy an existing Codeset to a new Codeset by record Ids",
				"description": "The record id is returned from any list or get operation",
				"operationId": "copyCodeset",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "fromCodesetId",
					"in": "path",
					"description": "The Source Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "toAssigningAuthorityId",
					"in": "path",
					"description": "The Destination Assigning Authority record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Destination Codeset record",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"404": {
						"description": "The record was not found"
					},
					"416": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.copyCodeset"
				}
			}
		},
		"/codeset/{tenant}/codeset/{id}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve a Codeset by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodeset",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Updates an existing Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCodeset",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Codeset record to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.udpateCodeset"
				}
			},
			"delete": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Deletes an existing Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCodeset",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Delete:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.deleteCodeset"
				}
			}
		},
		"/codeset/{tenant}/codeset/{id}/codes": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codes for a Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/codeset/{id}/codes/{code}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve Codes for a Codeset",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Codeset record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "code",
					"in": "path",
					"description": "The Code",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Code"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/codesets": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve all Codesets",
				"description": "",
				"operationId": "getAllCodesets",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"name": "status",
					"in": "query",
					"description": "The Codeset status to filter",
					"required": false,
					"type": "string",
					"enum": ["active", "inactive"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSets"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"post": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Create a new Codeset",
				"description": "",
				"operationId": "addCodesetById",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Codeset record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/CodeSet"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CodeSet"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.addCodesetById"
				}
			}
		},
		"/codeset/{tenant}/definitions": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Codeset Manager",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/definitions/{structure}": {
			"get": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Codeset Manager",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "AssigningAuthority", "CodeSet", "Code"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/codeset/{tenant}/flushcache": {
			"put": {
				"tags": ["Codeset Manager with tenant support"],
				"summary": "Flush the Codeset internal cache",
				"description": "The record id is returned from any list or get operation",
				"operationId": "flushCache",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appinfo|definitions|assigningauthority|assigningauthorities|assigningauthoritybyoid|codeset|codesets|code|codes|flushcache))[^/]+"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Add:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "codeset.ws.CodesetService.flushCache"
				}
			}
		},
		"/eventnotifier/appInfo": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve the Event Notifier Service application information",
				"description": "",
				"operationId": "getAppInfo_2",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/communication": {
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new Communication record",
				"description": "",
				"operationId": "addCommunication_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Communication record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Communication"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addCommunication"
				}
			}
		},
		"/eventnotifier/communication/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Communication by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCommunication_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Communication record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCommunication_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Communication record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Communication record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Communication"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateCommunication"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing Communication record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCommunication_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Communication record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteCommunication"
				}
			}
		},
		"/eventnotifier/communications": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all Communication records for a Subscriber by EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCommunications_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communications"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/definitions": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier",
				"description": "",
				"operationId": "getDefinitions_4",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/definitions/{structure}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier",
				"description": "",
				"operationId": "getDefinitions_3",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "Communication", "HashTag", "HashTagIdentification", "Subscriber", "DoNotDisturb"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/dnd": {
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new DoNotDisturb",
				"description": "",
				"operationId": "addDnd_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": false,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new DoNotDisturb record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/DoNotDisturb"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addDnd"
				}
			}
		},
		"/eventnotifier/dnd/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a DoNotDisturb by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getDnd_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing DoNotDisturb record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateDnd_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The DoNotDisturb record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/DoNotDisturb"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateDnd"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing DoNotDisturb record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteDnd_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteDnd"
				}
			}
		},
		"/eventnotifier/dnds": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all DoNotDisturbs by subscriber Id or subscriberEuid",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getDnds_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberId",
					"in": "query",
					"description": "The Subscriber record Id [default: use Subscriber EUID parameter]",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID [default: use Subscriber Id parameter]",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturbs"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/hashtag": {
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new Hashtag",
				"description": "",
				"operationId": "addHashTag_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Hashtag record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/HashTag"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addHashTag"
				}
			}
		},
		"/eventnotifier/hashtag/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Hashtag by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTag_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Hashtag record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateHashTag_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Hashtag record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/HashTag"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateHashTag"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing Hashtag record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteHashTag_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteHashTag"
				}
			}
		},
		"/eventnotifier/hashtag/{tag}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Hashtag by tag",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTag_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tag",
					"in": "path",
					"description": "The Hashtag tag",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/hashtagid": {
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new Hashtag Id",
				"description": "",
				"operationId": "addHashTagIdentification_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Hashtag Id record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/HashTagIdentification"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addHashTagIdentification"
				}
			}
		},
		"/eventnotifier/hashtagid/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Hashtag Id by record Id or name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentification_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Hashtag Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateHashTagIdentification_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Hashtag Id record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/HashTagIdentification"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateHashTagIdentification"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing Hashtag Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteHashTagIdentification_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteHashTagIdentification"
				}
			}
		},
		"/eventnotifier/hashtagid/{name}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Hashtag Id by record Id or name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentification_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Hashtag Id name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/hashtagids": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all Hashtag Ids",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentifications_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentifications"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/hashtags": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all Hashtag records",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTags_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTags"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/subscriber": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Subscriber by name or EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriber_2",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "query",
					"description": "The Subscriber tag [default: use EUID]",
					"required": false,
					"type": "string"
				}, {
					"name": "euid",
					"in": "query",
					"description": "The Subscriber tag [default: use name]",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new Subscriber record",
				"description": "",
				"operationId": "addSubscriber_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Subscriber record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Subscriber"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addSubscriber"
				}
			}
		},
		"/eventnotifier/subscriber/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Subscriber by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriber_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Subscriber record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscriber_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Subscriber record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Subscriber"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscriber"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing Subscriber record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteSubscriber_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteSubscriber"
				}
			}
		},
		"/eventnotifier/subscribers": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all Subscriber records",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscribers_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscribers"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/subscription": {
			"post": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Create a new Subscription",
				"description": "",
				"operationId": "addSubscription_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Subscription record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Subscription"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addSubscription"
				}
			}
		},
		"/eventnotifier/subscription/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve a Subscription by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscription_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Subscription record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscription_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Subscription record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Subscription"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscription"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Deletes an existing Subscription record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteSubscription_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteSubscription"
				}
			}
		},
		"/eventnotifier/subscription/{id}/behaviorCode": {
			"put": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Updates an existing Subscription record's Behavior Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscriptionBehavior_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Behavior Code (POS, NEG)",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Value"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscriptionBehavior"
				}
			}
		},
		"/eventnotifier/subscriptions": {
			"get": {
				"tags": ["NGMS Event Notifier"],
				"summary": "Retrieve all Subscription records by subscriber EUID and Hashtag",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriptions_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"name": "hashtag",
					"in": "query",
					"description": "The Hashtag",
					"required": true,
					"type": "string"
				}, {
					"name": "onlyActive",
					"in": "query",
					"description": "Only active subscription?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriptions"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/appInfo": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve the Event Notifier Service application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/{tenant}/communication": {
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new Communication record",
				"description": "",
				"operationId": "addCommunication",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Communication record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Communication"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addCommunication"
				}
			}
		},
		"/eventnotifier/{tenant}/communication/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Communication by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCommunication",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Communication record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateCommunication",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Communication record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Communication record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Communication"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateCommunication"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing Communication record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteCommunication",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Communication record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communication"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteCommunication"
				}
			}
		},
		"/eventnotifier/{tenant}/communications": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all Communication records for a Subscriber by EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getCommunications",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Communications"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/definitions": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/{tenant}/definitions/{structure}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "Communication", "HashTag", "HashTagIdentification", "Subscriber", "DoNotDisturb"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/eventnotifier/{tenant}/dnd": {
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new DoNotDisturb",
				"description": "",
				"operationId": "addDnd",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": false,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new DoNotDisturb record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/DoNotDisturb"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addDnd"
				}
			}
		},
		"/eventnotifier/{tenant}/dnd/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a DoNotDisturb by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getDnd",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing DoNotDisturb record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateDnd",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The DoNotDisturb record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/DoNotDisturb"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateDnd"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing DoNotDisturb record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteDnd",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The DoNotDisturb record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturb"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteDnd"
				}
			}
		},
		"/eventnotifier/{tenant}/dnds": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all DoNotDisturbs by subscriber Id or subscriberEuid",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getDnds",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "subscriberId",
					"in": "query",
					"description": "The Subscriber record Id [default: use Subscriber EUID parameter]",
					"required": false,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID [default: use Subscriber Id parameter]",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/DoNotDisturbs"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/hashtag": {
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new Hashtag",
				"description": "",
				"operationId": "addHashTag",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Hashtag record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/HashTag"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addHashTag"
				}
			}
		},
		"/eventnotifier/{tenant}/hashtag/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Hashtag by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTag",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Hashtag record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateHashTag",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Hashtag record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/HashTag"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateHashTag"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing Hashtag record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteHashTag",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTag"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteHashTag"
				}
			}
		},
		"/eventnotifier/{tenant}/hashtag/{tag}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Hashtag by tag",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTag",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "tag",
					"in": "path",
					"description": "The Hashtag tag",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/hashtagid": {
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new Hashtag Id",
				"description": "",
				"operationId": "addHashTagIdentification",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Hashtag Id record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/HashTagIdentification"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addHashTagIdentification"
				}
			}
		},
		"/eventnotifier/{tenant}/hashtagid/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Hashtag Id by record Id or name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentification",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Hashtag Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateHashTagIdentification",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Hashtag Id record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/HashTagIdentification"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateHashTagIdentification"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing Hashtag Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteHashTagIdentification",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Hashtag Id record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteHashTagIdentification"
				}
			}
		},
		"/eventnotifier/{tenant}/hashtagid/{name}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Hashtag Id by record Id or name",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentification",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Hashtag Id name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/hashtagids": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all Hashtag Ids",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTagIdentifications",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentifications"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/hashtags": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all Hashtag records",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getHashTags",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTags"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/subscriber": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Subscriber by name or EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriber",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "name",
					"in": "query",
					"description": "The Subscriber tag [default: use EUID]",
					"required": false,
					"type": "string"
				}, {
					"name": "euid",
					"in": "query",
					"description": "The Subscriber tag [default: use name]",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new Subscriber record",
				"description": "",
				"operationId": "addSubscriber",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Subscriber record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Subscriber"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addSubscriber"
				}
			}
		},
		"/eventnotifier/{tenant}/subscriber/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Subscriber by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriber",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Subscriber record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscriber",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Subscriber record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Subscriber"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscriber"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing Subscriber record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteSubscriber",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscriber record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriber"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteSubscriber"
				}
			}
		},
		"/eventnotifier/{tenant}/subscribers": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all Subscriber records",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscribers",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscribers"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifier/{tenant}/subscription": {
			"post": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Create a new Subscription",
				"description": "",
				"operationId": "addSubscription",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Subscription record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Subscription"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.addSubscription"
				}
			}
		},
		"/eventnotifier/{tenant}/subscription/{id}": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve a Subscription by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscription",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			},
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Subscription record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscription",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Subscription record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Subscription"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscription"
				}
			},
			"delete": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Deletes an existing Subscription record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteSubscription",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.deleteSubscription"
				}
			}
		},
		"/eventnotifier/{tenant}/subscription/{id}/behaviorCode": {
			"put": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Updates an existing Subscription record's Behavior Code",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateSubscriptionBehavior",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Subscription record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Behavior Code (POS, NEG)",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Value"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.service.ws.EventNotifierService.updateSubscriptionBehavior"
				}
			}
		},
		"/eventnotifier/{tenant}/subscriptions": {
			"get": {
				"tags": ["NGMS Event Notifier with tenant support"],
				"summary": "Retrieve all Subscription records by subscriber EUID and Hashtag",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getSubscriptions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|hashtagid|hashtagids|hashtag|hashtags|dnd|dnds|communication|communications|subscriber|subscribers|subscription|subscriptions))[^/]+"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"name": "hashtag",
					"in": "query",
					"description": "The Hashtag",
					"required": true,
					"type": "string"
				}, {
					"name": "onlyActive",
					"in": "query",
					"description": "Only active subscription?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Subscriptions"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/appInfo": {
			"get": {
				"tags": ["NGMS Event Collector"],
				"summary": "Retrieve the Event Notifier Collector application information",
				"description": "",
				"operationId": "getAppInfo_1",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/definitions": {
			"get": {
				"tags": ["NGMS Event Collector"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier Collector",
				"description": "",
				"operationId": "getDefinitions_2",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/definitions/{structure}": {
			"get": {
				"tags": ["NGMS Event Collector"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier Collector",
				"description": "",
				"operationId": "getDefinitions_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "Entry"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/entries": {
			"get": {
				"tags": ["NGMS Event Collector"],
				"summary": "Retrieve a Entries by Subscriber EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getEntries_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"name": "lastId",
					"in": "query",
					"description": "The last Entry record id queried",
					"required": false,
					"type": "integer",
					"default": 0,
					"format": "int64"
				}, {
					"name": "maxReturn",
					"in": "query",
					"description": "The maximum number of records to return [default: 100]",
					"required": false,
					"type": "integer",
					"default": 100,
					"format": "int32"
				}, {
					"name": "lastNRecords",
					"in": "query",
					"description": "The last 'n' records to return",
					"required": false,
					"type": "integer",
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entries"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.getEntries"
				}
			}
		},
		"/eventnotifiercollector/entry": {
			"post": {
				"tags": ["NGMS Event Collector"],
				"summary": "Create a new Entry record",
				"description": "",
				"operationId": "addEntry_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The new Entry record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Entry"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.addEntry"
				}
			}
		},
		"/eventnotifiercollector/entry/{id}": {
			"get": {
				"tags": ["NGMS Event Collector"],
				"summary": "Retrieve an Entry by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getEntry_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Entry record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.getEntry"
				}
			},
			"put": {
				"tags": ["NGMS Event Collector"],
				"summary": "Updates an existing Entry record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateEntry_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Entry record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Entry"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.updateEntry"
				}
			},
			"delete": {
				"tags": ["NGMS Event Collector"],
				"summary": "Deletes an existing Entry record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteEntry_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.deleteEntry"
				}
			}
		},
		"/eventnotifiercollector/entry/{id}/entryRead": {
			"put": {
				"tags": ["NGMS Event Collector"],
				"summary": "Updates an existing Entry record as read",
				"description": "The record id is returned from any list or get operation",
				"operationId": "entryRead_1",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The ReadDate to set",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ReadDate"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.entryRead"
				}
			}
		},
		"/eventnotifiercollector/{tenant}/appInfo": {
			"get": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Retrieve the Event Notifier Collector application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfoModel"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/{tenant}/definitions": {
			"get": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier Collector",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/{tenant}/definitions/{structure}": {
			"get": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Event Notifier Collector",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["All", "Entry"]
				}],
				"responses": {
					"404": {
						"description": "Invalid structure name supplied"
					},
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}]
			}
		},
		"/eventnotifiercollector/{tenant}/entries": {
			"get": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Retrieve a Entries by Subscriber EUID",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getEntries",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"name": "subscriberEuid",
					"in": "query",
					"description": "The Subscriber EUID",
					"required": true,
					"type": "string"
				}, {
					"name": "lastId",
					"in": "query",
					"description": "The last Entry record id queried",
					"required": false,
					"type": "integer",
					"default": 0,
					"format": "int64"
				}, {
					"name": "maxReturn",
					"in": "query",
					"description": "The maximum number of records to return [default: 100]",
					"required": false,
					"type": "integer",
					"default": 100,
					"format": "int32"
				}, {
					"name": "lastNRecords",
					"in": "query",
					"description": "The last 'n' records to return",
					"required": false,
					"type": "integer",
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entries"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.getEntries"
				}
			}
		},
		"/eventnotifiercollector/{tenant}/entry": {
			"post": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Create a new Entry record",
				"description": "",
				"operationId": "addEntry",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"in": "body",
					"name": "body",
					"description": "The new Entry record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Entry"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HashTagIdentification"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Add:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.addEntry"
				}
			}
		},
		"/eventnotifiercollector/{tenant}/entry/{id}": {
			"get": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Retrieve an Entry by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getEntry",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Entry record Id",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:View:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.getEntry"
				}
			},
			"put": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Updates an existing Entry record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateEntry",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Entry record to update",
					"required": false,
					"schema": {
						"$ref": "#/definitions/Entry"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.updateEntry"
				}
			},
			"delete": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Deletes an existing Entry record",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteEntry",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Delete:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.deleteEntry"
				}
			}
		},
		"/eventnotifiercollector/{tenant}/entry/{id}/entryRead": {
			"put": {
				"tags": ["NGMS Event Collector with tenant support"],
				"summary": "Updates an existing Entry record as read",
				"description": "The record id is returned from any list or get operation",
				"operationId": "entryRead",
				"produces": ["application/json"],
				"parameters": [{
					"name": "tenant",
					"in": "path",
					"description": "The tenant",
					"required": true,
					"type": "string",
					"pattern": "(?!(appInfo|definitions|entries|entry))[^/]+"
				}, {
					"name": "id",
					"in": "path",
					"description": "The Entry record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The ReadDate to set",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ReadDate"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Entry"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["EventNotifier:Update:EventNotifier.EventNotifierManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "eventnotifier.collector.ws.ResetService.entryRead"
				}
			}
		},
		"/monitor/flushcache/{whichcache}": {
			"post": {
				"tags": ["Healthbroker Service"],
				"summary": "Flush the cache on all nodes",
				"description": "",
				"operationId": "flushCache",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "whichcache",
					"in": "path",
					"description": "The cache to flush",
					"required": true,
					"type": "string",
					"enum": ["CODECACHE", "NGMSCACHE"]
				}, {
					"name": "configurationSettag",
					"in": "query",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["Codeset:Update:Codeset.CodesetManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "healthbroker.ws.Monitor.flushCache"
				}
			}
		},
		"/monitor/healthcheck": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Returns 'SUCCESS' or 'FAILURE' if simple return type or HealthCheckCombinedReturn if full details requested",
				"description": "",
				"operationId": "healthCheck",
				"produces": ["application/json"],
				"parameters": [{
					"name": "returnType",
					"in": "query",
					"description": "Requested return type",
					"required": false,
					"type": "string",
					"default": "SIMPLESUCCESSFAIL",
					"enum": ["SIMPLESUCCESSFAIL", "FULLDETAILS"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/HealthCheckCombinedReturn"
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total components responding to the Health Check"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				}
			}
		},
		"/monitor/messagebrokers": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all Message Brokers' health details",
				"description": "",
				"operationId": "getMessageBrokers",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "object"
							}
						}
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/minpollseconds": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Returns the minimum Healthbroker poll seconds (how long it waits between polls).  Return Map key is 'poll'.",
				"description": "",
				"operationId": "getMinPollSeconds",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all Nodes' with their health details",
				"description": "",
				"operationId": "getNodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "summary",
					"in": "query",
					"description": "Should just the summary be returned?",
					"required": false,
					"type": "boolean",
					"default": false,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"uniqueItems": true,
							"items": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve the Node's health details",
				"description": "",
				"operationId": "getNode",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "object"
							}
						}
					},
					"404": {
						"description": "The Node name does not exist"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/history": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all history facts for a given Node",
				"description": "",
				"operationId": "getNodeHistory",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "factName",
					"in": "query",
					"description": "List of Fact names to return (comma separated)",
					"required": true,
					"type": "array",
					"items": {
						"type": "string"
					},
					"collectionFormat": "multi"
				}, {
					"name": "from",
					"in": "query",
					"description": "The from date",
					"required": false,
					"type": "string",
					"format": "date-time"
				}, {
					"name": "to",
					"in": "query",
					"description": "The to date",
					"required": false,
					"type": "string",
					"format": "date-time"
				}, {
					"name": "previous",
					"in": "query",
					"description": "The previous timeunit to retrieve (empty=use From date param),minute,hour,day,month,year,'n' (seconds)",
					"required": false,
					"type": "string"
				}, {
					"name": "fidelity",
					"in": "query",
					"description": "The fidelity to return",
					"required": false,
					"type": "string",
					"enum": ["MINUTE", "HOUR", "DAY", "MONTH"]
				}, {
					"name": "includeCurrent",
					"in": "query",
					"description": "Include current (live) Facts?",
					"required": false,
					"type": "boolean",
					"default": false,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/messagebrokers": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve Message Brokers information for Node",
				"description": "",
				"operationId": "getNodeMessageBrokers",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/messagebrokers/{brokerId}/queues/{name}/messages": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve Messages for a given queue",
				"description": "",
				"operationId": "getQueueMessages",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "brokerId",
					"in": "path",
					"description": "The Broker name",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Queue name",
					"required": true,
					"type": "string"
				}, {
					"name": "body",
					"in": "query",
					"description": "Include the body of the message in the return?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}, {
					"name": "ngms",
					"in": "query",
					"description": "Include the NGMS Message in the return?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"uniqueItems": true,
							"items": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The Node, Broker, or Queue does not exist"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			},
			"delete": {
				"tags": ["Healthbroker Service"],
				"summary": "Delete all messages in a queue",
				"description": "",
				"operationId": "removeQueueMessages",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "brokerId",
					"in": "path",
					"description": "The Broker name",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Queue name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "healthbroker.ws.Monitor.removeQueueMessages"
				}
			}
		},
		"/monitor/nodes/{name}/messagebrokers/{brokerId}/queues/{name}/messages/{msgId}": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve a Message by a message id",
				"description": "",
				"operationId": "getQueueMessage",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "brokerId",
					"in": "path",
					"description": "The Broker name",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Queue name",
					"required": true,
					"type": "string"
				}, {
					"name": "msgId",
					"in": "path",
					"description": "The Message Id",
					"required": true,
					"type": "string"
				}, {
					"name": "body",
					"in": "query",
					"description": "Include the body of the message in the return?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}, {
					"name": "ngms",
					"in": "query",
					"description": "Include the NGMS Message in the return?",
					"required": false,
					"type": "boolean",
					"default": true,
					"enum": ["true", "false"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "object"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The Node, Broker, Queue, or Message does not exist"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			},
			"delete": {
				"tags": ["Healthbroker Service"],
				"summary": "Delete a message in a queue",
				"description": "",
				"operationId": "removeQueueMessage",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "brokerId",
					"in": "path",
					"description": "The Broker name",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "path",
					"description": "The Queue name",
					"required": true,
					"type": "string"
				}, {
					"name": "msgId",
					"in": "path",
					"description": "The Message Id",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "healthbroker.ws.Monitor.removeQueueMessage"
				}
			}
		},
		"/monitor/nodes/{name}/rawhistory": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all raw history facts for a given Node",
				"description": "",
				"operationId": "getNodeRawHistory",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "factName",
					"in": "query",
					"description": "The Fact name",
					"required": false,
					"type": "string"
				}, {
					"name": "from",
					"in": "query",
					"description": "The from date",
					"required": false,
					"type": "string",
					"format": "date-time"
				}, {
					"name": "to",
					"in": "query",
					"description": "The to date",
					"required": false,
					"type": "string",
					"format": "date-time"
				}, {
					"name": "previous",
					"in": "query",
					"description": "The previous timeunit to retrieve (empty=use From date param),minute,hour,day,month,year,'n' (seconds)",
					"required": false,
					"type": "string"
				}, {
					"name": "fidelity",
					"in": "query",
					"description": "The fidelity to return (empty=use From date param),minute,hour,day,month,year,'n' (seconds)",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/FactHistoryReturn"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/rawstats": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve raw health stats for Node",
				"description": "",
				"operationId": "getNodeRawStats",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "level",
					"in": "query",
					"description": "The Level of Facts to return",
					"required": false,
					"type": "string",
					"enum": ["detail", "statistics", "summary"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FactInfo"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The Node name does not exist"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/routes": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all route details for a given Node",
				"description": "",
				"operationId": "getNodeRoutes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"uniqueItems": true,
							"items": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/nodes/{name}/routes/{routeName}/status": {
			"put": {
				"tags": ["Healthbroker Service"],
				"summary": "Set a specific route's status",
				"description": "",
				"operationId": "setRouteStatus",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "routeName",
					"in": "path",
					"description": "The Route name",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Status to set (in 'value' map entry: Started, Stopped or Suspended)",
					"required": true,
					"schema": {
						"type": "object",
						"additionalProperties": {
							"type": "object"
						}
					},
					"x-examples": {
						"application/json": "{\"value\":\"Suspended\"}"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "healthbroker.ws.Monitor.setRouteStatus"
				}
			}
		},
		"/monitor/rawstats": {
			"get": {
				"tags": ["Healthbroker Service"],
				"summary": "Retrieve all Nodes raw health stats",
				"description": "",
				"operationId": "getAllRawStats",
				"produces": ["application/json"],
				"parameters": [{
					"name": "level",
					"in": "query",
					"description": "The Level of Facts to return",
					"required": false,
					"type": "string",
					"allowEmptyValue": true,
					"enum": ["detail", "statistics", "summary"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"uniqueItems": true,
							"items": {
								"$ref": "#/definitions/FactInfo"
							}
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/monitor/refresher": {
			"post": {
				"tags": ["Healthbroker Service"],
				"summary": "Trigger the Healthbroker to do a manual poll for Facts",
				"description": "",
				"operationId": "triggerStatsUpdate",
				"consumes": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful"
					},
					"503": {
						"description": "The HealthBroker Serice is unavailable.  Ensure the HealthBroker Service bundle is loaded and Active"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}]
			}
		},
		"/ngmsrest/appinfo": {
			"get": {
				"tags": ["NGMS REST Message Submit Adapter"],
				"summary": "Retrieve the REST Listener Adapter application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfo"
						}
					}
				}
			}
		},
		"/ngmsrest/types/{msgType}/submit": {
			"post": {
				"tags": ["NGMS REST Message Submit Adapter"],
				"summary": "Submit a message to NGMS",
				"description": "",
				"operationId": "submit",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "msgType",
					"in": "path",
					"description": "The message type",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Message Reference",
					"required": true,
					"schema": {
						"$ref": "#/definitions/MessageReference"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/MessageReference"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["NGMS:Update:NGMS.NGMSManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "adapter.listener.rest.ws.RestService.submit"
				}
			}
		},
		"/ngmsresubmit/appinfo": {
			"get": {
				"tags": ["NGMS Error Resubmit Adapter"],
				"summary": "Retrieve the Resubmit Adapter application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfo"
						}
					}
				}
			}
		},
		"/ngmsresubmit/resubmit/nodes/{ngsSourceNodeName}/queues/{jmsSourceQueueName}/resubmitter": {
			"post": {
				"tags": ["NGMS Error Resubmit Adapter"],
				"summary": "Resubmit a message to NGMS",
				"description": "",
				"operationId": "resubmit",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "ngsSourceNodeName",
					"in": "path",
					"description": "The Source Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "jmsSourceQueueName",
					"in": "path",
					"description": "The Source Queue name",
					"required": true,
					"type": "string"
				}, {
					"name": "user",
					"in": "query",
					"description": "The User",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Message Reference",
					"required": true,
					"schema": {
						"$ref": "#/definitions/MessageReference"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/MessageReturn"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.resubmit.ws.RestService.resubmit"
				}
			}
		},
		"/nodemanager/appinfo": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve the Node Manager Service application information",
				"description": "",
				"operationId": "getAppInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/AppInfo"
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/nodemanager/definitions/{structure}": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve the response structure definition(s) supplied to/from Node Manager",
				"description": "",
				"operationId": "getDefinitions",
				"produces": ["application/json"],
				"parameters": [{
					"name": "structure",
					"in": "path",
					"description": "The structure name ('All'=all structures)",
					"required": true,
					"type": "string",
					"enum": ["Node", "All"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FieldDefinitionType"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					},
					"404": {
						"description": "Invalid structure name supplied"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/nodemanager/mynode": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve 'my' node entry",
				"description": "",
				"operationId": "getMyNode",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Node"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/nodemanager/node": {
			"post": {
				"tags": ["Node Manager"],
				"summary": "Create a new Node",
				"description": "",
				"operationId": "addNode",
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "the new Node record to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Node"
					}
				}],
				"responses": {
					"201": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Node"
						}
					},
					"302": {
						"description": "The record already exists"
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "com.nextgate.nodemanager.addNode"
				}
			}
		},
		"/nodemanager/node/{id}": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve a Node by record Id",
				"description": "The record id is returned from any list or get operation",
				"operationId": "getNode",
				"produces": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Node record Id or zero (0) for my node",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Node"
						}
					},
					"404": {
						"description": "The record was not found"
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			},
			"put": {
				"tags": ["Node Manager"],
				"summary": "Updates an existing Node",
				"description": "The record id is returned from any list or get operation",
				"operationId": "updateNode",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Node record Id to update",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"in": "body",
					"name": "body",
					"description": "The Node record to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Node"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Node"
						}
					},
					"400": {
						"description": "One or more of the parameters passed is invalid.  Check errors in the system log"
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "com.nextgate.nodemanager.updateNode"
				}
			},
			"delete": {
				"tags": ["Node Manager"],
				"summary": "Deletes an existing Node",
				"description": "The record id is returned from any list or get operation",
				"operationId": "deleteNode",
				"consumes": ["application/json"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Node record Id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Node"
						}
					},
					"404": {
						"description": "The record was not found"
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log"
					}
				},
				"security": [{
					"ngsAuthProvider": ["GUI:Account Administration:GUI.GUIManager"]
				}],
				"x-ngsaudit": {
					"auditkey": "com.nextgate.nodemanager.deleteNode"
				}
			}
		},
		"/nodemanager/nodes": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve Nodes",
				"description": "",
				"operationId": "getNodes",
				"produces": ["application/json"],
				"parameters": [{
					"name": "environment",
					"in": "query",
					"description": "The Node environment to filter",
					"required": false,
					"type": "string",
					"enum": ["ANY", "DEVELOPMENT", "TEST", "TRAIN", "STAGE", "PRODUCTION"]
				}],
				"responses": {
					"200": {
						"description": "The known Nodes are returned",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Node"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"/nodemanager/nodes/{name}": {
			"get": {
				"tags": ["Node Manager"],
				"summary": "Retrieve Nodes by name",
				"description": "",
				"operationId": "getNodeByName",
				"produces": ["application/json"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "The Node name",
					"required": true,
					"type": "string"
				}, {
					"name": "environment",
					"in": "query",
					"description": "The Node environment to filter",
					"required": false,
					"type": "string",
					"enum": ["ANY", "DEVELOPMENT", "TEST", "TRAIN", "STAGE", "PRODUCTION"]
				}],
				"responses": {
					"200": {
						"description": "The Node is returned",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Node"
							}
						},
						"headers": {
							"X-Count": {
								"type": "integer",
								"format": "int32",
								"description": "The total entries in list"
							}
						}
					}
				},
				"security": [{
					"ngsAuthProvider": ["any"]
				}]
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Patient": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Search for registered patients by demographics",
				"description": "",
				"operationId": "search",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "family",
					"in": "query",
					"description": "The patient's family name",
					"required": false,
					"type": "string"
				}, {
					"name": "family:exact",
					"in": "query",
					"description": "The patient's family name (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "given",
					"in": "query",
					"description": "The patient's given name",
					"required": false,
					"type": "string"
				}, {
					"name": "given:exact",
					"in": "query",
					"description": "The patient's given name (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "gender",
					"in": "query",
					"description": "The patient's gender code",
					"required": false,
					"type": "string"
				}, {
					"name": "birthdate",
					"in": "query",
					"description": "The patient's birthdate",
					"required": false,
					"type": "string"
				}, {
					"name": "birthdate:exact",
					"in": "query",
					"description": "The patient's birthdate (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "identifier",
					"in": "query",
					"description": "The patient's local identifier",
					"required": false,
					"type": "string"
				}, {
					"name": "_id",
					"in": "query",
					"description": "The patient's EMPI identifier (EUID)",
					"required": false,
					"type": "string"
				}, {
					"name": "address",
					"in": "query",
					"description": "The patient's address",
					"required": false,
					"type": "string"
				}, {
					"name": "address:exact",
					"in": "query",
					"description": "The patient's address (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "telecom",
					"in": "query",
					"description": "The patient's telephone number",
					"required": false,
					"type": "string"
				}, {
					"name": "telecom:exact",
					"in": "query",
					"description": "The patient's telephone number (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "multipleBirthInteger",
					"in": "query",
					"description": "The patient's birth order",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "mothersMaidenName.family",
					"in": "query",
					"description": "The patient's mother's maiden family name",
					"required": false,
					"type": "string"
				}, {
					"name": "mothersMaidenName.given",
					"in": "query",
					"description": "The patient's mother's maiden given name",
					"required": false,
					"type": "string"
				}, {
					"name": "_sort:asc",
					"in": "query",
					"description": "Sort assending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_sort:desc",
					"in": "query",
					"description": "Sort descending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_count",
					"in": "query",
					"description": "The max return",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.search"
				}
			},
			"post": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Create a Patient. Body is type FHIR Patient.",
				"description": "",
				"operationId": "create",
				"consumes": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}, {
					"in": "body",
					"name": "body",
					"required": false,
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Patient"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.create"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Patient/$ihe-pix": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "PIXm Search for registered patients by identifier",
				"description": "",
				"operationId": "xrefManager",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "sourceIdentifier",
					"in": "query",
					"description": "The source system and identifier (format: urn:oid:1.2.3.4|id or just id and use targetSystem parameter)",
					"required": true,
					"type": "string"
				}, {
					"name": "targetSystem",
					"in": "query",
					"description": "The target system to include (format: urn:oid:1.2.3.4)",
					"required": false,
					"type": "string"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Patient"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.xrefManager"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Patient/_search": {
			"post": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Search for registered patients by demographics",
				"description": "",
				"operationId": "searchPost",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "family",
					"in": "query",
					"description": "The patient's family name",
					"required": false,
					"type": "string"
				}, {
					"name": "given",
					"in": "query",
					"description": "The patient's given name",
					"required": false,
					"type": "string"
				}, {
					"name": "gender",
					"in": "query",
					"description": "The patient's gender code",
					"required": false,
					"type": "string"
				}, {
					"name": "birthdate",
					"in": "query",
					"description": "The patient's birthdate",
					"required": false,
					"type": "string"
				}, {
					"name": "identifier",
					"in": "query",
					"description": "The patient's local identifier",
					"required": false,
					"type": "string"
				}, {
					"name": "_sort:asc",
					"in": "query",
					"description": "Sort assending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_sort:desc",
					"in": "query",
					"description": "Sort descending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.search"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Patient/metadata": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Retrieve the FHIR Patient metadata for this implementation",
				"description": "",
				"operationId": "getConformance",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CapabilityStatement"
						}
					}
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Patient/{id}": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Retrieve a registered patient by EMPI identifier (EUID)",
				"description": "",
				"operationId": "get",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The patient EMPI identifier (EUID)",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Patient"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.get"
				}
			},
			"put": {
				"tags": ["NGMS FHIR Adapter - Patient"],
				"summary": "Update an existing Patient. Body is type FHIR Patient.",
				"description": "The record id is returned from any list or get operation",
				"operationId": "update",
				"consumes": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "the Patient EMPI identifier (EUID)",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}, {
					"in": "body",
					"name": "body",
					"required": false,
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Patient"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePatient.update"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Practitioner": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Search for registered practitioner by demographics",
				"description": "",
				"operationId": "search",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "family",
					"in": "query",
					"description": "The practitioner's family name",
					"required": false,
					"type": "string"
				}, {
					"name": "family:exact",
					"in": "query",
					"description": "The practitioner's family name (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "given",
					"in": "query",
					"description": "The practitioner's given name",
					"required": false,
					"type": "string"
				}, {
					"name": "given:exact",
					"in": "query",
					"description": "The practitioner's given name (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "gender",
					"in": "query",
					"description": "The practitioner's gender code",
					"required": false,
					"type": "string"
				}, {
					"name": "specialty",
					"in": "query",
					"description": "The practitioner's specialty",
					"required": false,
					"type": "string"
				}, {
					"name": "specialty:exact",
					"in": "query",
					"description": "The practitioner's specialty (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "identifier",
					"in": "query",
					"description": "The practitioner's local identifier",
					"required": false,
					"type": "string"
				}, {
					"name": "_id",
					"in": "query",
					"description": "The practitioner's EMPI identifier (EUID)",
					"required": false,
					"type": "string"
				}, {
					"name": "address",
					"in": "query",
					"description": "The practitioner's address",
					"required": false,
					"type": "string"
				}, {
					"name": "address:exact",
					"in": "query",
					"description": "The practitioner's address (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "telecom",
					"in": "query",
					"description": "The practitioner's telephone number",
					"required": false,
					"type": "string"
				}, {
					"name": "telecom:exact",
					"in": "query",
					"description": "The practitioner's telephone number (exact match only)",
					"required": false,
					"type": "string"
				}, {
					"name": "multipleBirthInteger",
					"in": "query",
					"description": "The practitioner's birth order",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "mothersMaidenName.family",
					"in": "query",
					"description": "The practitioner's mother's maiden family name",
					"required": false,
					"type": "string"
				}, {
					"name": "mothersMaidenName.given",
					"in": "query",
					"description": "The practitioner's mother's maiden given name",
					"required": false,
					"type": "string"
				}, {
					"name": "_sort:asc",
					"in": "query",
					"description": "Sort assending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_sort:desc",
					"in": "query",
					"description": "Sort descending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_count",
					"in": "query",
					"description": "The max return",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePractitioner.search"
				}
			},
			"post": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Create a Practitioner. Body is type FHIR Practitioner.",
				"description": "",
				"operationId": "create",
				"consumes": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}, {
					"in": "body",
					"name": "body",
					"required": false,
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Practitioner"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePractitioner.create"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Practitioner/_search": {
			"post": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Search for registered practitioners by demographics",
				"description": "",
				"operationId": "searchPost",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "family",
					"in": "query",
					"description": "The practitioner's family name",
					"required": false,
					"type": "string"
				}, {
					"name": "given",
					"in": "query",
					"description": "The practitioner's given name",
					"required": false,
					"type": "string"
				}, {
					"name": "gender",
					"in": "query",
					"description": "The practitioner's gender code",
					"required": false,
					"type": "string"
				}, {
					"name": "specialty",
					"in": "query",
					"description": "The practitioner's specialty",
					"required": false,
					"type": "string"
				}, {
					"name": "identifier",
					"in": "query",
					"description": "The practitioner's local identifier",
					"required": false,
					"type": "string"
				}, {
					"name": "_sort:asc",
					"in": "query",
					"description": "Sort assending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_sort:desc",
					"in": "query",
					"description": "Sort descending [default: _sort:desc]",
					"required": false,
					"type": "boolean"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePractitioner.search"
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Practitioner/metadata": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Retrieve the FHIR Practitioner metadata for this implementation",
				"description": "",
				"operationId": "getConformance",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/CapabilityStatement"
						}
					}
				}
			}
		},
		"http://0.0.0.0:8011/ws/ms/fhir/Practitioner/{id}": {
			"get": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Retrieve a registered practitioner by Registry identifier (EUID)",
				"description": "",
				"operationId": "get",
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The practitioner Registry identifier (EUID)",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Practitioner"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePractitioner.get"
				}
			},
			"put": {
				"tags": ["NGMS FHIR Adapter - Practitioner"],
				"summary": "Update an existing Practitioner. Body is type FHIR Practitioner.",
				"description": "The record id is returned from any list or get operation",
				"operationId": "update",
				"consumes": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"produces": ["application/json", "application/json+fhir", "application/xml", "application/xml+fhir"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "the Practitioner EMPI identifier (EUID)",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "_format",
					"in": "query",
					"description": "The desired return format [empty: json+fhir]",
					"required": false,
					"type": "string",
					"enum": ["application/json+fhir", "application/xml+fhir"]
				}, {
					"in": "body",
					"name": "body",
					"required": false,
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "The operation was successful",
						"schema": {
							"$ref": "#/definitions/Practitioner"
						}
					},
					"404": {
						"description": "The record was not found",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					},
					"500": {
						"description": "If there was an internal error.  Usually a resource (file, database, etc) problem. Check errors in the system log",
						"schema": {
							"$ref": "#/definitions/OperationOutcome"
						}
					}
				},
				"x-ngsaudit": {
					"auditkey": "adapter.listener.fhir.ws.RestServicePractitioner.update"
				}
			}
		}
	},
	"securityDefinitions": {
		"ngsAuthProvider": {
			"description": "NextGate Security",
			"type": "ngsAuthProvider"
		}
	},
	"definitions": {
		"Node": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"environment": {
					"type": "string"
				},
				"group": {
					"type": "string"
				},
				"host": {
					"type": "string"
				},
				"portHttp": {
					"type": "integer",
					"format": "int64"
				},
				"portHttps": {
					"type": "integer",
					"format": "int64"
				},
				"hbPort": {
					"type": "integer",
					"format": "int64"
				},
				"hbWebStrategy": {
					"type": "string"
				},
				"lastKnownState": {
					"type": "string"
				}
			}
		},
		"AppInfo": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"appName": {
					"type": "string"
				},
				"appDescription": {
					"type": "string"
				}
			}
		},
		"FieldDefinitionType": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"displayName": {
					"type": "string"
				},
				"required": {
					"type": "boolean"
				},
				"updatable": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"HashTagIdentification": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"scriptRef": {
					"type": "string"
				},
				"scriptData": {
					"type": "string"
				}
			}
		},
		"Entry": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"subscriberAssigningAuthority": {
					"type": "string"
				},
				"subscriberEuid": {
					"type": "string"
				},
				"subjectAssigningAuthority": {
					"type": "string"
				},
				"subjectEuid": {
					"type": "string"
				},
				"eventNodeId": {
					"type": "string"
				},
				"hashTag": {
					"type": "string"
				},
				"hashTagDescription": {
					"type": "string"
				},
				"details": {
					"type": "string"
				},
				"occurred": {
					"type": "string",
					"format": "date-time"
				},
				"entryRead": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"Entries": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Entry"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"AppInfoModel": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"ReadDate": {
			"type": "object",
			"properties": {
				"read": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"Subscription": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"idSubscriber": {
					"type": "integer",
					"format": "int64"
				},
				"idHashTag": {
					"type": "integer",
					"format": "int64"
				},
				"description": {
					"type": "string"
				},
				"effective": {
					"type": "string",
					"format": "date-time"
				},
				"expiration": {
					"type": "string",
					"format": "date-time"
				},
				"behaviorCode": {
					"type": "string"
				},
				"euid": {
					"type": "string"
				},
				"dataFilterScript": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Subscriber": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"assigningAuthority": {
					"type": "string"
				},
				"userId": {
					"type": "string"
				},
				"euid": {
					"type": "string"
				},
				"scriptRefCommunicationSelection": {
					"type": "string"
				}
			}
		},
		"Subscriptions": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscription"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"HashTag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"tag": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"scriptRefFilter": {
					"type": "string"
				}
			}
		},
		"HashTags": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HashTag"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"DoNotDisturb": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"idSubscriber": {
					"type": "integer",
					"format": "int64"
				},
				"description": {
					"type": "string"
				},
				"idHashTag": {
					"type": "integer",
					"format": "int64"
				},
				"euid": {
					"type": "string"
				},
				"date1": {
					"type": "string",
					"format": "date-time"
				},
				"date2": {
					"type": "string",
					"format": "date-time"
				},
				"timeRange": {
					"type": "string"
				}
			}
		},
		"Communication": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"idSubscriber": {
					"type": "integer",
					"format": "int64"
				},
				"precedence": {
					"type": "integer",
					"format": "int32"
				},
				"scriptRefCommunicationFormat": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"scriptRefNotification": {
					"type": "string"
				}
			}
		},
		"DoNotDisturbs": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DoNotDisturb"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Subscribers": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscriber"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"HashTagIdentifications": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HashTagIdentification"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Value": {
			"type": "object",
			"properties": {
				"value": {
					"type": "string"
				}
			}
		},
		"Communications": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Communication"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"CodeSet": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"assigningAuthorityId": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"sourceDescription": {
					"type": "string"
				},
				"sourceURL": {
					"type": "string"
				},
				"sourceFormat": {
					"type": "string"
				},
				"updateFrequencyDays": {
					"type": "integer",
					"format": "int64"
				},
				"effectiveDate": {
					"type": "string",
					"format": "date-time"
				},
				"deactivationDate": {
					"type": "string",
					"format": "date-time"
				},
				"authorizedGroup": {
					"type": "string"
				}
			}
		},
		"Code": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"setId": {
					"type": "integer",
					"format": "int64"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"CodeSets": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeSet"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"CodeEntry": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"CodesetEntry": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"effective": {
					"type": "string",
					"format": "date-time"
				},
				"expiration": {
					"type": "string",
					"format": "date-time"
				},
				"codes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeEntry"
					}
				}
			}
		},
		"CodesetFullList": {
			"type": "object",
			"properties": {
				"assigningAuthorityNamespace": {
					"type": "string"
				},
				"assigningAuthorityId": {
					"type": "integer",
					"format": "int64"
				},
				"codesets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodesetEntry"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"AssigningAuthority": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"namespace": {
					"type": "string"
				},
				"oid": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"useType": {
					"type": "string"
				},
				"commType": {
					"type": "string"
				},
				"commAddress": {
					"type": "string"
				},
				"parentId": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"AssigningAuthorities": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssigningAuthority"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"FactInfo": {
			"type": "object",
			"properties": {
				"appCode": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"level": {
					"type": "string",
					"enum": ["SUMMARY", "DETAIL", "STATISTICS", "INTERNAL"]
				},
				"unitType": {
					"type": "string",
					"enum": ["GENERAL", "SIZEBYTES", "DURATIONMS", "COUNT"]
				},
				"historyType": {
					"type": "string",
					"enum": ["NONE", "SUM", "LASTRECORDED"]
				},
				"lastUpdated": {
					"type": "string",
					"format": "date-time"
				},
				"currentValue": {
					"type": "object"
				},
				"displayValue": {
					"type": "string"
				},
				"transientFact": {
					"type": "boolean"
				},
				"typeCode": {
					"type": "string",
					"enum": ["LONG", "DOUBLE", "DATE", "STRING"]
				}
			}
		},
		"FactHistoryEntry": {
			"type": "object",
			"properties": {
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"fidelity": {
					"type": "string",
					"enum": ["MINUTE", "HOUR", "DAY", "MONTH"]
				},
				"facts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/FactInfo"
					}
				}
			}
		},
		"FactHistoryReturn": {
			"type": "object",
			"properties": {
				"nodeName": {
					"type": "string"
				},
				"entries": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/FactHistoryEntry"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"HealthCheckCombinedReturn": {
			"type": "object",
			"properties": {
				"overallReturnStatus": {
					"type": "string",
					"enum": ["SUCCESS", "FAIL"]
				},
				"cachedResponse": {
					"type": "boolean"
				},
				"cachedLimitSeconds": {
					"type": "integer",
					"format": "int32"
				},
				"returns": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HealthCheckReturn"
					}
				}
			}
		},
		"HealthCheckReturn": {
			"type": "object",
			"properties": {
				"productCode": {
					"type": "string"
				},
				"overallReturnStatus": {
					"type": "string",
					"enum": ["SUCCESS", "FAIL"]
				},
				"validations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HealthCheckReturnValidationEntry"
					}
				}
			}
		},
		"HealthCheckReturnValidationEntry": {
			"type": "object",
			"properties": {
				"description": {
					"type": "string"
				},
				"returnStatus": {
					"type": "string",
					"enum": ["SUCCESS", "FAIL"]
				},
				"failureSummary": {
					"type": "string"
				},
				"failureFullStack": {
					"type": "string"
				}
			}
		},
		"MessageReturn": {
			"type": "object",
			"properties": {
				"ack": {
					"type": "string"
				}
			}
		},
		"MessageReference": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				}
			}
		},
		"CodemapEntryType": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"codemapSetId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceCodeId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceCodeCode": {
					"type": "string"
				},
				"destCodeId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeCode": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"CodemapSetType": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"sourceAssigningAuthId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceAssigningAuthName": {
					"type": "string"
				},
				"sourceCodesetId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceCodesetName": {
					"type": "string"
				},
				"sourceCodesetDescription": {
					"type": "string"
				},
				"destAssigningAuthId": {
					"type": "integer",
					"format": "int64"
				},
				"destAssigningAuthName": {
					"type": "string"
				},
				"destCodesetId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodesetName": {
					"type": "string"
				},
				"destCodesetDescription": {
					"type": "string"
				},
				"destCodeOnBlankId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeOnBlankCode": {
					"type": "string"
				},
				"destCodeOnBlankDescription": {
					"type": "string"
				},
				"destCodeOnNotFoundId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeOnNotFoundCode": {
					"type": "string"
				},
				"destCodeOnNotFoundDescription": {
					"type": "string"
				},
				"useSourceOnNotFound": {
					"type": "boolean"
				},
				"useOnReverseNotFound": {
					"type": "boolean"
				},
				"mapList": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodemapEntryType"
					}
				},
				"maps": {
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/CodemapEntryType"
					}
				},
				"reverseMaps": {
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/CodemapEntryType"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"CodemapSet": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"sourceAssigningAuthId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceCodesetId": {
					"type": "integer",
					"format": "int64"
				},
				"destAssigningAuthId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodesetId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeIdOnBlank": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeIdOnNotFound": {
					"type": "integer",
					"format": "int64"
				},
				"useSourceOnNotFound": {
					"type": "boolean"
				},
				"useOnReverseNotFound": {
					"type": "boolean"
				}
			}
		},
		"Codemap": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"type": "string"
				},
				"updated": {
					"type": "string",
					"format": "date-time"
				},
				"updatedBy": {
					"type": "string"
				},
				"codemapSetId": {
					"type": "integer",
					"format": "int64"
				},
				"sourceCodeId": {
					"type": "integer",
					"format": "int64"
				},
				"destCodeId": {
					"type": "integer",
					"format": "int64"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"Codemaps": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Codemap"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"CodemapSets": {
			"type": "object",
			"properties": {
				"list": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodemapSet"
					}
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Address": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"use": {
					"type": "string",
					"enum": ["HOME", "WORK", "TEMP", "OLD", "NULL"]
				},
				"type": {
					"type": "string",
					"enum": ["POSTAL", "PHYSICAL", "BOTH", "NULL"]
				},
				"text": {
					"type": "string"
				},
				"line": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"city": {
					"type": "string"
				},
				"district": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"postalCode": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"empty": {
					"type": "boolean"
				},
				"typeElement": {
					"$ref": "#/definitions/EnumerationAddressType"
				},
				"districtElement": {
					"$ref": "#/definitions/StringType"
				},
				"postalCodeElement": {
					"$ref": "#/definitions/StringType"
				},
				"countryElement": {
					"$ref": "#/definitions/StringType"
				},
				"textElement": {
					"$ref": "#/definitions/StringType"
				},
				"useElement": {
					"$ref": "#/definitions/EnumerationAddressUse"
				},
				"stateElement": {
					"$ref": "#/definitions/StringType"
				},
				"cityElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"AnimalComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"species": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"breed": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"genderStatus": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"empty": {
					"type": "boolean"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Attachment": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"contentType": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"data": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "byte"
					}
				},
				"url": {
					"type": "string"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"hash": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "byte"
					}
				},
				"title": {
					"type": "string"
				},
				"creation": {
					"type": "string",
					"format": "date-time"
				},
				"empty": {
					"type": "boolean"
				},
				"dataElement": {
					"$ref": "#/definitions/Base64BinaryType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"titleElement": {
					"$ref": "#/definitions/StringType"
				},
				"creationElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"contentTypeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"sizeElement": {
					"$ref": "#/definitions/UnsignedIntType"
				},
				"hashElement": {
					"$ref": "#/definitions/Base64BinaryType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Base64BinaryType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "byte"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"BooleanType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CodeType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"valueNotNull": {
					"type": "string"
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CodeableConcept": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"coding": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"text": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"codingFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"textElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Coding": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"system": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"display": {
					"type": "string"
				},
				"userSelected": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				},
				"versionElement": {
					"$ref": "#/definitions/StringType"
				},
				"systemElement": {
					"$ref": "#/definitions/UriType"
				},
				"codeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"displayElement": {
					"$ref": "#/definitions/StringType"
				},
				"userSelectedElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ContactComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"relationship": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"name": {
					"$ref": "#/definitions/HumanName"
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"address": {
					"$ref": "#/definitions/Address"
				},
				"gender": {
					"type": "string",
					"enum": ["MALE", "FEMALE", "OTHER", "UNKNOWN", "NULL"]
				},
				"organization": {
					"$ref": "#/definitions/Reference"
				},
				"organizationTarget": {
					"$ref": "#/definitions/Organization"
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"empty": {
					"type": "boolean"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"genderElement": {
					"$ref": "#/definitions/EnumerationAdministrativeGender"
				},
				"relationshipFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ContactPoint": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"system": {
					"type": "string",
					"enum": ["PHONE", "FAX", "EMAIL", "PAGER", "URL", "OTHER", "NULL"]
				},
				"value": {
					"type": "string"
				},
				"use": {
					"type": "string",
					"enum": ["HOME", "WORK", "TEMP", "OLD", "MOBILE", "NULL"]
				},
				"rank": {
					"type": "integer",
					"format": "int32"
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"empty": {
					"type": "boolean"
				},
				"systemElement": {
					"$ref": "#/definitions/EnumerationContactPointSystem"
				},
				"valueElement": {
					"$ref": "#/definitions/StringType"
				},
				"useElement": {
					"$ref": "#/definitions/EnumerationContactPointUse"
				},
				"rankElement": {
					"$ref": "#/definitions/PositiveIntType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"DateTimeType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"tzMin": {
					"type": "integer",
					"format": "int32"
				},
				"tzHour": {
					"type": "integer",
					"format": "int32"
				},
				"tzSign": {
					"type": "boolean"
				},
				"value": {
					"type": "string",
					"format": "date-time"
				},
				"timeZone": {
					"$ref": "#/definitions/TimeZone"
				},
				"month": {
					"type": "integer",
					"format": "int32"
				},
				"year": {
					"type": "integer",
					"format": "int32"
				},
				"day": {
					"type": "integer",
					"format": "int32"
				},
				"millis": {
					"type": "integer",
					"format": "int32"
				},
				"hour": {
					"type": "integer",
					"format": "int32"
				},
				"minute": {
					"type": "integer",
					"format": "int32"
				},
				"second": {
					"type": "integer",
					"format": "int32"
				},
				"nanos": {
					"type": "integer",
					"format": "int64"
				},
				"precision": {
					"type": "string",
					"enum": ["YEAR", "MONTH", "DAY", "MINUTE", "SECOND", "MILLI"]
				},
				"valueAsString": {
					"type": "string"
				},
				"valueAsCalendar": {
					"type": "string",
					"format": "date-time"
				},
				"timeZoneZulu": {
					"type": "boolean"
				},
				"today": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"DateType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "string",
					"format": "date-time"
				},
				"timeZone": {
					"$ref": "#/definitions/TimeZone"
				},
				"month": {
					"type": "integer",
					"format": "int32"
				},
				"year": {
					"type": "integer",
					"format": "int32"
				},
				"day": {
					"type": "integer",
					"format": "int32"
				},
				"millis": {
					"type": "integer",
					"format": "int32"
				},
				"hour": {
					"type": "integer",
					"format": "int32"
				},
				"minute": {
					"type": "integer",
					"format": "int32"
				},
				"second": {
					"type": "integer",
					"format": "int32"
				},
				"nanos": {
					"type": "integer",
					"format": "int64"
				},
				"precision": {
					"type": "string",
					"enum": ["YEAR", "MONTH", "DAY", "MINUTE", "SECOND", "MILLI"]
				},
				"valueAsString": {
					"type": "string"
				},
				"valueAsCalendar": {
					"type": "string",
					"format": "date-time"
				},
				"timeZoneZulu": {
					"type": "boolean"
				},
				"today": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Endpoint": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "SUSPENDED", "ERROR", "OFF", "ENTEREDINERROR", "TEST", "NULL"]
				},
				"name": {
					"type": "string"
				},
				"managingOrganization": {
					"$ref": "#/definitions/Reference"
				},
				"managingOrganizationTarget": {
					"$ref": "#/definitions/Organization"
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"connectionType": {
					"$ref": "#/definitions/Coding"
				},
				"payloadType": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"payloadMimeType": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeType"
					}
				},
				"address": {
					"type": "string"
				},
				"header": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"publicKey": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"statusElement": {
					"$ref": "#/definitions/EnumerationEndpointStatus"
				},
				"addressElement": {
					"$ref": "#/definitions/UriType"
				},
				"publicKeyElement": {
					"$ref": "#/definitions/StringType"
				},
				"payloadTypeFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"Enum": {
			"type": "object"
		},
		"EnumFactory": {
			"type": "object"
		},
		"EnumFactoryAddressType": {
			"type": "object"
		},
		"EnumFactoryAddressUse": {
			"type": "object"
		},
		"EnumFactoryAdministrativeGender": {
			"type": "object"
		},
		"EnumFactoryContactPointSystem": {
			"type": "object"
		},
		"EnumFactoryContactPointUse": {
			"type": "object"
		},
		"EnumFactoryEndpointStatus": {
			"type": "object"
		},
		"EnumFactoryEnum": {
			"type": "object"
		},
		"EnumFactoryIdentifierUse": {
			"type": "object"
		},
		"EnumFactoryLinkType": {
			"type": "object"
		},
		"EnumFactoryNameUse": {
			"type": "object"
		},
		"EnumFactoryNarrativeStatus": {
			"type": "object"
		},
		"Enumeration": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryEnum"
				},
				"value": {
					"$ref": "#/definitions/Enum"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationAddressType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryAddressType"
				},
				"value": {
					"type": "string",
					"enum": ["POSTAL", "PHYSICAL", "BOTH", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationAddressUse": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryAddressUse"
				},
				"value": {
					"type": "string",
					"enum": ["HOME", "WORK", "TEMP", "OLD", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationAdministrativeGender": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryAdministrativeGender"
				},
				"value": {
					"type": "string",
					"enum": ["MALE", "FEMALE", "OTHER", "UNKNOWN", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationContactPointSystem": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryContactPointSystem"
				},
				"value": {
					"type": "string",
					"enum": ["PHONE", "FAX", "EMAIL", "PAGER", "URL", "OTHER", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationContactPointUse": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryContactPointUse"
				},
				"value": {
					"type": "string",
					"enum": ["HOME", "WORK", "TEMP", "OLD", "MOBILE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationEndpointStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryEndpointStatus"
				},
				"value": {
					"type": "string",
					"enum": ["ACTIVE", "SUSPENDED", "ERROR", "OFF", "ENTEREDINERROR", "TEST", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationIdentifierUse": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryIdentifierUse"
				},
				"value": {
					"type": "string",
					"enum": ["USUAL", "OFFICIAL", "TEMP", "SECONDARY", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationLinkType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryLinkType"
				},
				"value": {
					"type": "string",
					"enum": ["REPLACE", "REFER", "SEEALSO", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationNameUse": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryNameUse"
				},
				"value": {
					"type": "string",
					"enum": ["USUAL", "OFFICIAL", "TEMP", "NICKNAME", "ANONYMOUS", "OLD", "MAIDEN", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationNarrativeStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryNarrativeStatus"
				},
				"value": {
					"type": "string",
					"enum": ["GENERATED", "EXTENSIONS", "ADDITIONAL", "EMPTY", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Extension": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"url": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/Type"
				},
				"empty": {
					"type": "boolean"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"valueAsPrimitive": {
					"$ref": "#/definitions/IPrimitiveTypeObject"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"HumanName": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"use": {
					"type": "string",
					"enum": ["USUAL", "OFFICIAL", "TEMP", "NICKNAME", "ANONYMOUS", "OLD", "MAIDEN", "NULL"]
				},
				"text": {
					"type": "string"
				},
				"family": {
					"type": "string"
				},
				"given": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"prefix": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"suffix": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"empty": {
					"type": "boolean"
				},
				"prefixAsSingleString": {
					"type": "string"
				},
				"suffixAsSingleString": {
					"type": "string"
				},
				"nameAsSingleString": {
					"type": "string"
				},
				"givenAsSingleString": {
					"type": "string"
				},
				"textElement": {
					"$ref": "#/definitions/StringType"
				},
				"useElement": {
					"$ref": "#/definitions/EnumerationNameUse"
				},
				"familyElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"IBaseCoding": {
			"type": "object",
			"properties": {
				"system": {
					"type": "string"
				},
				"display": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IBaseMetaType": {
			"type": "object",
			"properties": {
				"tag": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/IBaseCoding"
					}
				},
				"profile": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/IPrimitiveTypeString"
					}
				},
				"lastUpdated": {
					"type": "string",
					"format": "date-time"
				},
				"security": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/IBaseCoding"
					}
				},
				"versionId": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IBaseResource": {
			"type": "object",
			"properties": {
				"meta": {
					"$ref": "#/definitions/IBaseMetaType"
				},
				"idElement": {
					"$ref": "#/definitions/IIdType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IIdType": {
			"type": "object",
			"properties": {
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"absolute": {
					"type": "boolean"
				},
				"local": {
					"type": "boolean"
				},
				"baseUrl": {
					"type": "string"
				},
				"resourceType": {
					"type": "string"
				},
				"idPartAsLong": {
					"type": "integer",
					"format": "int64"
				},
				"versionIdPart": {
					"type": "string"
				},
				"idPart": {
					"type": "string"
				},
				"idPartValid": {
					"type": "boolean"
				},
				"idPartValidLong": {
					"type": "boolean"
				},
				"versionIdPartValidLong": {
					"type": "boolean"
				},
				"versionIdPartAsLong": {
					"type": "integer",
					"format": "int64"
				},
				"valueAsString": {
					"type": "string"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IPrimitiveType": {
			"type": "object",
			"properties": {
				"value": {
					"type": "object"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IPrimitiveTypeObject": {
			"type": "object",
			"properties": {
				"value": {
					"type": "object"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IPrimitiveTypeString": {
			"type": "object",
			"properties": {
				"value": {
					"type": "string"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"IdType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"absolute": {
					"type": "boolean"
				},
				"local": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"baseUrl": {
					"type": "string"
				},
				"resourceType": {
					"type": "string"
				},
				"idPartAsLong": {
					"type": "integer",
					"format": "int64"
				},
				"versionIdPart": {
					"type": "string"
				},
				"idPart": {
					"type": "string"
				},
				"idPartValid": {
					"type": "boolean"
				},
				"idPartValidLong": {
					"type": "boolean"
				},
				"versionIdPartValidLong": {
					"type": "boolean"
				},
				"versionIdPartAsLong": {
					"type": "integer",
					"format": "int64"
				},
				"idPartAsBigDecimal": {
					"type": "number"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Identifier": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"use": {
					"type": "string",
					"enum": ["USUAL", "OFFICIAL", "TEMP", "SECONDARY", "NULL"]
				},
				"type": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"system": {
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"assigner": {
					"$ref": "#/definitions/Reference"
				},
				"assignerTarget": {
					"$ref": "#/definitions/Organization"
				},
				"empty": {
					"type": "boolean"
				},
				"systemElement": {
					"$ref": "#/definitions/UriType"
				},
				"valueElement": {
					"$ref": "#/definitions/StringType"
				},
				"useElement": {
					"$ref": "#/definitions/EnumerationIdentifierUse"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"InstantType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "string",
					"format": "date-time"
				},
				"timeZone": {
					"$ref": "#/definitions/TimeZone"
				},
				"month": {
					"type": "integer",
					"format": "int32"
				},
				"year": {
					"type": "integer",
					"format": "int32"
				},
				"day": {
					"type": "integer",
					"format": "int32"
				},
				"millis": {
					"type": "integer",
					"format": "int32"
				},
				"hour": {
					"type": "integer",
					"format": "int32"
				},
				"minute": {
					"type": "integer",
					"format": "int32"
				},
				"second": {
					"type": "integer",
					"format": "int32"
				},
				"nanos": {
					"type": "integer",
					"format": "int64"
				},
				"precision": {
					"type": "string",
					"enum": ["YEAR", "MONTH", "DAY", "MINUTE", "SECOND", "MILLI"]
				},
				"valueAsString": {
					"type": "string"
				},
				"valueAsCalendar": {
					"type": "string",
					"format": "date-time"
				},
				"timeZoneZulu": {
					"type": "boolean"
				},
				"today": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"IntegerType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "integer",
					"format": "int32"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Location": {
			"type": "object",
			"properties": {
				"line": {
					"type": "integer",
					"format": "int32"
				},
				"column": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"Meta": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"versionId": {
					"type": "string"
				},
				"lastUpdated": {
					"type": "string",
					"format": "date-time"
				},
				"profile": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UriType"
					}
				},
				"security": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"tag": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"lastUpdatedElement": {
					"$ref": "#/definitions/InstantType"
				},
				"versionIdElement": {
					"$ref": "#/definitions/IdType"
				},
				"securityFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"tagFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Narrative": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"status": {
					"type": "string",
					"enum": ["GENERATED", "EXTENSIONS", "ADDITIONAL", "EMPTY", "NULL"]
				},
				"div": {
					"$ref": "#/definitions/XhtmlNode"
				},
				"empty": {
					"type": "boolean"
				},
				"statusElement": {
					"$ref": "#/definitions/EnumerationNarrativeStatus"
				},
				"statusAsString": {
					"type": "string"
				},
				"divAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Organization": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"active": {
					"type": "boolean"
				},
				"type": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"name": {
					"type": "string"
				},
				"alias": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"address": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},
				"partOf": {
					"$ref": "#/definitions/Reference"
				},
				"partOfTarget": {
					"$ref": "#/definitions/Organization"
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrganizationContactComponent"
					}
				},
				"endpoint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"endpointTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Endpoint"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/OrganizationContactComponent"
				},
				"addressFirstRep": {
					"$ref": "#/definitions/Address"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"activeElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"endpointFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"OrganizationContactComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"purpose": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"name": {
					"$ref": "#/definitions/HumanName"
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"address": {
					"$ref": "#/definitions/Address"
				},
				"empty": {
					"type": "boolean"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Patient": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"active": {
					"type": "boolean"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HumanName"
					}
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"gender": {
					"type": "string",
					"enum": ["MALE", "FEMALE", "OTHER", "UNKNOWN", "NULL"]
				},
				"birthDate": {
					"type": "string",
					"format": "date-time"
				},
				"deceased": {
					"$ref": "#/definitions/Type"
				},
				"address": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},
				"maritalStatus": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"multipleBirth": {
					"$ref": "#/definitions/Type"
				},
				"photo": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Attachment"
					}
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactComponent"
					}
				},
				"animal": {
					"$ref": "#/definitions/AnimalComponent"
				},
				"communication": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PatientCommunicationComponent"
					}
				},
				"generalPractitioner": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"generalPractitionerTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"managingOrganization": {
					"$ref": "#/definitions/Reference"
				},
				"managingOrganizationTarget": {
					"$ref": "#/definitions/Organization"
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PatientLinkComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/ContactComponent"
				},
				"addressFirstRep": {
					"$ref": "#/definitions/Address"
				},
				"multipleBirthIntegerType": {
					"$ref": "#/definitions/IntegerType"
				},
				"communicationFirstRep": {
					"$ref": "#/definitions/PatientCommunicationComponent"
				},
				"birthDateElement": {
					"$ref": "#/definitions/DateType"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"deceasedBooleanType": {
					"$ref": "#/definitions/BooleanType"
				},
				"deceasedDateTimeType": {
					"$ref": "#/definitions/DateTimeType"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"multipleBirthBooleanType": {
					"$ref": "#/definitions/BooleanType"
				},
				"generalPractitionerFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"activeElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"nameFirstRep": {
					"$ref": "#/definitions/HumanName"
				},
				"genderElement": {
					"$ref": "#/definitions/EnumerationAdministrativeGender"
				},
				"linkFirstRep": {
					"$ref": "#/definitions/PatientLinkComponent"
				},
				"photoFirstRep": {
					"$ref": "#/definitions/Attachment"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"PatientCommunicationComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"language": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"preferred": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				},
				"preferredElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"PatientLinkComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"other": {
					"$ref": "#/definitions/Reference"
				},
				"otherTarget": {
					"$ref": "#/definitions/Resource"
				},
				"type": {
					"type": "string",
					"enum": ["REPLACE", "REFER", "SEEALSO", "NULL"]
				},
				"empty": {
					"type": "boolean"
				},
				"typeElement": {
					"$ref": "#/definitions/EnumerationLinkType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Period": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"start": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"empty": {
					"type": "boolean"
				},
				"startElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"endElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"PositiveIntType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "integer",
					"format": "int32"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Reference": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"resource": {
					"$ref": "#/definitions/IBaseResource"
				},
				"reference": {
					"type": "string"
				},
				"identifier": {
					"$ref": "#/definitions/Identifier"
				},
				"display": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"displayElement": {
					"$ref": "#/definitions/StringType"
				},
				"referenceElement_": {
					"$ref": "#/definitions/StringType"
				},
				"referenceElement": {
					"$ref": "#/definitions/IIdType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"Resource": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"idBase": {
					"type": "string"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"StringType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"valueNotNull": {
					"type": "string"
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"TimeZone": {
			"type": "object",
			"properties": {
				"displayName": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"rawOffset": {
					"type": "integer",
					"format": "int32"
				},
				"dstsavings": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"Type": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"UnsignedIntType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "integer",
					"format": "int32"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"UriType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"XhtmlNode": {
			"type": "object",
			"properties": {
				"location": {
					"$ref": "#/definitions/Location"
				},
				"nodeType": {
					"type": "string",
					"enum": ["Element", "Text", "Comment", "DocType", "Document", "Instruction"]
				},
				"name": {
					"type": "string"
				},
				"attributes": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},
				"childNodes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/XhtmlNode"
					}
				},
				"content": {
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"firstElement": {
					"$ref": "#/definitions/XhtmlNode"
				},
				"valueAsString": {
					"type": "string"
				},
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"nsDecl": {
					"type": "string"
				}
			}
		},
		"EnumFactoryIssueSeverity": {
			"type": "object"
		},
		"EnumFactoryIssueType": {
			"type": "object"
		},
		"EnumerationIssueSeverity": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryIssueSeverity"
				},
				"value": {
					"type": "string",
					"enum": ["FATAL", "ERROR", "WARNING", "INFORMATION", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationIssueType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryIssueType"
				},
				"value": {
					"type": "string",
					"enum": ["INVALID", "STRUCTURE", "REQUIRED", "VALUE", "INVARIANT", "SECURITY", "LOGIN", "UNKNOWN", "EXPIRED", "FORBIDDEN", "SUPPRESSED", "PROCESSING", "NOTSUPPORTED", "DUPLICATE", "NOTFOUND", "TOOLONG", "CODEINVALID", "EXTENSION", "TOOCOSTLY", "BUSINESSRULE", "CONFLICT", "INCOMPLETE", "TRANSIENT", "LOCKERROR", "NOSTORE", "EXCEPTION", "TIMEOUT", "THROTTLED", "INFORMATIONAL", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"OperationOutcome": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"issue": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OperationOutcomeIssueComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"issueFirstRep": {
					"$ref": "#/definitions/OperationOutcomeIssueComponent"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"OperationOutcomeIssueComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"severity": {
					"type": "string",
					"enum": ["FATAL", "ERROR", "WARNING", "INFORMATION", "NULL"]
				},
				"code": {
					"type": "string",
					"enum": ["INVALID", "STRUCTURE", "REQUIRED", "VALUE", "INVARIANT", "SECURITY", "LOGIN", "UNKNOWN", "EXPIRED", "FORBIDDEN", "SUPPRESSED", "PROCESSING", "NOTSUPPORTED", "DUPLICATE", "NOTFOUND", "TOOLONG", "CODEINVALID", "EXTENSION", "TOOCOSTLY", "BUSINESSRULE", "CONFLICT", "INCOMPLETE", "TRANSIENT", "LOCKERROR", "NOSTORE", "EXCEPTION", "TIMEOUT", "THROTTLED", "INFORMATIONAL", "NULL"]
				},
				"details": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"diagnostics": {
					"type": "string"
				},
				"location": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"expression": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"diagnosticsElement": {
					"$ref": "#/definitions/StringType"
				},
				"severityElement": {
					"$ref": "#/definitions/EnumerationIssueSeverity"
				},
				"codeElement": {
					"$ref": "#/definitions/EnumerationIssueType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Bundle": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": ["DOCUMENT", "MESSAGE", "TRANSACTION", "TRANSACTIONRESPONSE", "BATCH", "BATCHRESPONSE", "HISTORY", "SEARCHSET", "COLLECTION", "NULL"]
				},
				"identifier": {
					"$ref": "#/definitions/Identifier"
				},
				"total": {
					"type": "integer",
					"format": "int32"
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/BundleLinkComponent"
					}
				},
				"entry": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/BundleEntryComponent"
					}
				},
				"signature": {
					"$ref": "#/definitions/Signature"
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"typeElement": {
					"$ref": "#/definitions/EnumerationBundleType"
				},
				"entryFirstRep": {
					"$ref": "#/definitions/BundleEntryComponent"
				},
				"totalElement": {
					"$ref": "#/definitions/UnsignedIntType"
				},
				"linkFirstRep": {
					"$ref": "#/definitions/BundleLinkComponent"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"BundleEntryComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/BundleLinkComponent"
					}
				},
				"fullUrl": {
					"type": "string"
				},
				"resource": {
					"$ref": "#/definitions/Resource"
				},
				"search": {
					"$ref": "#/definitions/BundleEntrySearchComponent"
				},
				"request": {
					"$ref": "#/definitions/BundleEntryRequestComponent"
				},
				"response": {
					"$ref": "#/definitions/BundleEntryResponseComponent"
				},
				"empty": {
					"type": "boolean"
				},
				"linkFirstRep": {
					"$ref": "#/definitions/BundleLinkComponent"
				},
				"fullUrlElement": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"BundleEntryRequestComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"method": {
					"type": "string",
					"enum": ["GET", "POST", "PUT", "DELETE", "NULL"]
				},
				"url": {
					"type": "string"
				},
				"ifNoneMatch": {
					"type": "string"
				},
				"ifModifiedSince": {
					"type": "string",
					"format": "date-time"
				},
				"ifMatch": {
					"type": "string"
				},
				"ifNoneExist": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"ifNoneMatchElement": {
					"$ref": "#/definitions/StringType"
				},
				"ifModifiedSinceElement": {
					"$ref": "#/definitions/InstantType"
				},
				"ifMatchElement": {
					"$ref": "#/definitions/StringType"
				},
				"ifNoneExistElement": {
					"$ref": "#/definitions/StringType"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"methodElement": {
					"$ref": "#/definitions/EnumerationHTTPVerb"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"BundleEntryResponseComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"status": {
					"type": "string"
				},
				"location": {
					"type": "string"
				},
				"etag": {
					"type": "string"
				},
				"lastModified": {
					"type": "string",
					"format": "date-time"
				},
				"outcome": {
					"$ref": "#/definitions/Resource"
				},
				"empty": {
					"type": "boolean"
				},
				"locationElement": {
					"$ref": "#/definitions/UriType"
				},
				"lastModifiedElement": {
					"$ref": "#/definitions/InstantType"
				},
				"statusElement": {
					"$ref": "#/definitions/StringType"
				},
				"etagElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"BundleEntrySearchComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"mode": {
					"type": "string",
					"enum": ["MATCH", "INCLUDE", "OUTCOME", "NULL"]
				},
				"score": {
					"type": "number"
				},
				"empty": {
					"type": "boolean"
				},
				"scoreElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"modeElement": {
					"$ref": "#/definitions/EnumerationSearchEntryMode"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"BundleLinkComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"relation": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"relationElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"DecimalType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "number"
				},
				"valueAsInteger": {
					"type": "integer",
					"format": "int32"
				},
				"valueAsNumber": {
					"$ref": "#/definitions/Number"
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumFactoryBundleType": {
			"type": "object"
		},
		"EnumFactoryHTTPVerb": {
			"type": "object"
		},
		"EnumFactorySearchEntryMode": {
			"type": "object"
		},
		"EnumerationBundleType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryBundleType"
				},
				"value": {
					"type": "string",
					"enum": ["DOCUMENT", "MESSAGE", "TRANSACTION", "TRANSACTIONRESPONSE", "BATCH", "BATCHRESPONSE", "HISTORY", "SEARCHSET", "COLLECTION", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationHTTPVerb": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryHTTPVerb"
				},
				"value": {
					"type": "string",
					"enum": ["GET", "POST", "PUT", "DELETE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationSearchEntryMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactorySearchEntryMode"
				},
				"value": {
					"type": "string",
					"enum": ["MATCH", "INCLUDE", "OUTCOME", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Number": {
			"type": "object"
		},
		"Signature": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"type": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"when": {
					"type": "string",
					"format": "date-time"
				},
				"who": {
					"$ref": "#/definitions/Type"
				},
				"onBehalfOf": {
					"$ref": "#/definitions/Type"
				},
				"contentType": {
					"type": "string"
				},
				"blob": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "byte"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"contentTypeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"onBehalfOfUriType": {
					"$ref": "#/definitions/UriType"
				},
				"onBehalfOfReference": {
					"$ref": "#/definitions/Reference"
				},
				"blobElement": {
					"$ref": "#/definitions/Base64BinaryType"
				},
				"whenElement": {
					"$ref": "#/definitions/InstantType"
				},
				"whoReference": {
					"$ref": "#/definitions/Reference"
				},
				"whoUriType": {
					"$ref": "#/definitions/UriType"
				},
				"typeFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatement": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"url": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["DRAFT", "ACTIVE", "RETIRED", "NULL"]
				},
				"experimental": {
					"type": "boolean"
				},
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"publisher": {
					"type": "string"
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactDetail"
					}
				},
				"useContext": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UsageContext"
					}
				},
				"jurisdiction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"description": {
					"type": "string"
				},
				"purpose": {
					"type": "string"
				},
				"copyright": {
					"type": "string"
				},
				"kind": {
					"type": "string",
					"enum": ["INSTANCE", "CAPABILITY", "REQUIREMENTS", "NULL"]
				},
				"instantiates": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UriType"
					}
				},
				"software": {
					"$ref": "#/definitions/CapabilityStatementSoftwareComponent"
				},
				"implementation": {
					"$ref": "#/definitions/CapabilityStatementImplementationComponent"
				},
				"fhirVersion": {
					"type": "string"
				},
				"acceptUnknown": {
					"type": "string",
					"enum": ["NO", "EXTENSIONS", "ELEMENTS", "BOTH", "NULL"]
				},
				"format": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeType"
					}
				},
				"patchFormat": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeType"
					}
				},
				"implementationGuide": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UriType"
					}
				},
				"profile": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"profileTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StructureDefinition"
					}
				},
				"rest": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestComponent"
					}
				},
				"messaging": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementMessagingComponent"
					}
				},
				"document": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementDocumentComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/ContactDetail"
				},
				"experimentalElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"descriptionElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"purposeElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"copyrightElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"jurisdictionFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"publisherElement": {
					"$ref": "#/definitions/StringType"
				},
				"useContextFirstRep": {
					"$ref": "#/definitions/UsageContext"
				},
				"fhirVersionElement": {
					"$ref": "#/definitions/IdType"
				},
				"acceptUnknownElement": {
					"$ref": "#/definitions/EnumerationUnknownContentCode"
				},
				"versionElement": {
					"$ref": "#/definitions/StringType"
				},
				"messagingFirstRep": {
					"$ref": "#/definitions/CapabilityStatementMessagingComponent"
				},
				"profileFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"documentFirstRep": {
					"$ref": "#/definitions/CapabilityStatementDocumentComponent"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"titleElement": {
					"$ref": "#/definitions/StringType"
				},
				"kindElement": {
					"$ref": "#/definitions/EnumerationCapabilityStatementKind"
				},
				"statusElement": {
					"$ref": "#/definitions/EnumerationPublicationStatus"
				},
				"dateElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"restFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestComponent"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementDocumentComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"mode": {
					"type": "string",
					"enum": ["PRODUCER", "CONSUMER", "NULL"]
				},
				"documentation": {
					"type": "string"
				},
				"profile": {
					"$ref": "#/definitions/Reference"
				},
				"profileTarget": {
					"$ref": "#/definitions/StructureDefinition"
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"modeElement": {
					"$ref": "#/definitions/EnumerationDocumentMode"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementImplementationComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"description": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"descriptionElement": {
					"$ref": "#/definitions/StringType"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementMessagingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"endpoint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementMessagingEndpointComponent"
					}
				},
				"reliableCache": {
					"type": "integer",
					"format": "int32"
				},
				"documentation": {
					"type": "string"
				},
				"event": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementMessagingEventComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"reliableCacheElement": {
					"$ref": "#/definitions/UnsignedIntType"
				},
				"endpointFirstRep": {
					"$ref": "#/definitions/CapabilityStatementMessagingEndpointComponent"
				},
				"eventFirstRep": {
					"$ref": "#/definitions/CapabilityStatementMessagingEventComponent"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementMessagingEndpointComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"protocol": {
					"$ref": "#/definitions/Coding"
				},
				"address": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"addressElement": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementMessagingEventComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"code": {
					"$ref": "#/definitions/Coding"
				},
				"category": {
					"type": "string",
					"enum": ["CONSEQUENCE", "CURRENCY", "NOTIFICATION", "NULL"]
				},
				"mode": {
					"type": "string",
					"enum": ["SENDER", "RECEIVER", "NULL"]
				},
				"focus": {
					"type": "string"
				},
				"request": {
					"$ref": "#/definitions/Reference"
				},
				"requestTarget": {
					"$ref": "#/definitions/StructureDefinition"
				},
				"response": {
					"$ref": "#/definitions/Reference"
				},
				"responseTarget": {
					"$ref": "#/definitions/StructureDefinition"
				},
				"documentation": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"categoryElement": {
					"$ref": "#/definitions/EnumerationMessageSignificanceCategory"
				},
				"modeElement": {
					"$ref": "#/definitions/EnumerationEventCapabilityMode"
				},
				"focusElement": {
					"$ref": "#/definitions/CodeType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"mode": {
					"type": "string",
					"enum": ["CLIENT", "SERVER", "NULL"]
				},
				"documentation": {
					"type": "string"
				},
				"security": {
					"$ref": "#/definitions/CapabilityStatementRestSecurityComponent"
				},
				"resource": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestResourceComponent"
					}
				},
				"interaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemInteractionComponent"
					}
				},
				"searchParam": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestResourceSearchParamComponent"
					}
				},
				"operation": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestOperationComponent"
					}
				},
				"compartment": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UriType"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"interactionFirstRep": {
					"$ref": "#/definitions/SystemInteractionComponent"
				},
				"searchParamFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestResourceSearchParamComponent"
				},
				"resourceFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestResourceComponent"
				},
				"operationFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestOperationComponent"
				},
				"modeElement": {
					"$ref": "#/definitions/EnumerationRestfulCapabilityMode"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestOperationComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"name": {
					"type": "string"
				},
				"definition": {
					"$ref": "#/definitions/Reference"
				},
				"definitionTarget": {
					"$ref": "#/definitions/OperationDefinition"
				},
				"empty": {
					"type": "boolean"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestResourceComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"type": {
					"type": "string"
				},
				"profile": {
					"$ref": "#/definitions/Reference"
				},
				"profileTarget": {
					"$ref": "#/definitions/StructureDefinition"
				},
				"documentation": {
					"type": "string"
				},
				"interaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ResourceInteractionComponent"
					}
				},
				"versioning": {
					"type": "string",
					"enum": ["NOVERSION", "VERSIONED", "VERSIONEDUPDATE", "NULL"]
				},
				"readHistory": {
					"type": "boolean"
				},
				"updateCreate": {
					"type": "boolean"
				},
				"conditionalCreate": {
					"type": "boolean"
				},
				"conditionalRead": {
					"type": "string",
					"enum": ["NOTSUPPORTED", "MODIFIEDSINCE", "NOTMATCH", "FULLSUPPORT", "NULL"]
				},
				"conditionalUpdate": {
					"type": "boolean"
				},
				"conditionalDelete": {
					"type": "string",
					"enum": ["NOTSUPPORTED", "SINGLE", "MULTIPLE", "NULL"]
				},
				"referencePolicy": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumerationReferenceHandlingPolicy"
					}
				},
				"searchInclude": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"searchRevInclude": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"searchParam": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestResourceSearchParamComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"typeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"interactionFirstRep": {
					"$ref": "#/definitions/ResourceInteractionComponent"
				},
				"searchParamFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestResourceSearchParamComponent"
				},
				"readHistoryElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"conditionalReadElement": {
					"$ref": "#/definitions/EnumerationConditionalReadStatus"
				},
				"conditionalUpdateElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"versioningElement": {
					"$ref": "#/definitions/EnumerationResourceVersionPolicy"
				},
				"conditionalCreateElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"updateCreateElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"conditionalDeleteElement": {
					"$ref": "#/definitions/EnumerationConditionalDeleteStatus"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestResourceSearchParamComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"name": {
					"type": "string"
				},
				"definition": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": ["NUMBER", "DATE", "STRING", "TOKEN", "REFERENCE", "COMPOSITE", "QUANTITY", "URI", "NULL"]
				},
				"documentation": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"typeElement": {
					"$ref": "#/definitions/EnumerationSearchParamType"
				},
				"definitionElement": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestSecurityCertificateComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"type": {
					"type": "string"
				},
				"blob": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "byte"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"typeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"blobElement": {
					"$ref": "#/definitions/Base64BinaryType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementRestSecurityComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"cors": {
					"type": "boolean"
				},
				"service": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"description": {
					"type": "string"
				},
				"certificate": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CapabilityStatementRestSecurityCertificateComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"descriptionElement": {
					"$ref": "#/definitions/StringType"
				},
				"certificateFirstRep": {
					"$ref": "#/definitions/CapabilityStatementRestSecurityCertificateComponent"
				},
				"serviceFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"corsElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"CapabilityStatementSoftwareComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"name": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"releaseDate": {
					"type": "string",
					"format": "date-time"
				},
				"empty": {
					"type": "boolean"
				},
				"versionElement": {
					"$ref": "#/definitions/StringType"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"releaseDateElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ContactDetail": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"name": {
					"type": "string"
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinition": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"path": {
					"type": "string"
				},
				"representation": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumerationPropertyRepresentation"
					}
				},
				"sliceName": {
					"type": "string"
				},
				"label": {
					"type": "string"
				},
				"code": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"slicing": {
					"$ref": "#/definitions/ElementDefinitionSlicingComponent"
				},
				"definition": {
					"type": "string"
				},
				"comments": {
					"type": "string"
				},
				"requirements": {
					"type": "string"
				},
				"alias": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"min": {
					"type": "integer",
					"format": "int32"
				},
				"max": {
					"type": "string"
				},
				"base": {
					"$ref": "#/definitions/ElementDefinitionBaseComponent"
				},
				"contentReference": {
					"type": "string"
				},
				"type": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TypeRefComponent"
					}
				},
				"defaultValue": {
					"$ref": "#/definitions/Type"
				},
				"meaningWhenMissing": {
					"type": "string"
				},
				"fixed": {
					"$ref": "#/definitions/Type"
				},
				"pattern": {
					"$ref": "#/definitions/Type"
				},
				"example": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ElementDefinitionExampleComponent"
					}
				},
				"minValue": {
					"$ref": "#/definitions/Type"
				},
				"maxValue": {
					"$ref": "#/definitions/Type"
				},
				"maxLength": {
					"type": "integer",
					"format": "int32"
				},
				"condition": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/IdType"
					}
				},
				"constraint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ElementDefinitionConstraintComponent"
					}
				},
				"mustSupport": {
					"type": "boolean"
				},
				"isModifier": {
					"type": "boolean"
				},
				"isSummary": {
					"type": "boolean"
				},
				"binding": {
					"$ref": "#/definitions/ElementDefinitionBindingComponent"
				},
				"mapping": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ElementDefinitionMappingComponent"
					}
				},
				"short": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"minValueDecimalType": {
					"$ref": "#/definitions/DecimalType"
				},
				"maxValueInstantType": {
					"$ref": "#/definitions/InstantType"
				},
				"contentReferenceElement": {
					"$ref": "#/definitions/UriType"
				},
				"maxValueTimeType": {
					"$ref": "#/definitions/TimeType"
				},
				"minValueDateType": {
					"$ref": "#/definitions/DateType"
				},
				"sliceNameElement": {
					"$ref": "#/definitions/StringType"
				},
				"minValueTimeType": {
					"$ref": "#/definitions/TimeType"
				},
				"minValueDateTimeType": {
					"$ref": "#/definitions/DateTimeType"
				},
				"requirementsElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"maxValueDateTimeType": {
					"$ref": "#/definitions/DateTimeType"
				},
				"minValuePositiveIntType": {
					"$ref": "#/definitions/PositiveIntType"
				},
				"meaningWhenMissingElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"exampleFirstRep": {
					"$ref": "#/definitions/ElementDefinitionExampleComponent"
				},
				"definitionElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"minValueInstantType": {
					"$ref": "#/definitions/InstantType"
				},
				"minValueIntegerType": {
					"$ref": "#/definitions/IntegerType"
				},
				"commentsElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"minValueUnsignedIntType": {
					"$ref": "#/definitions/UnsignedIntType"
				},
				"minValueQuantity": {
					"$ref": "#/definitions/Quantity"
				},
				"maxValueDateType": {
					"$ref": "#/definitions/DateType"
				},
				"isSummaryElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"maxValueIntegerType": {
					"$ref": "#/definitions/IntegerType"
				},
				"constraintFirstRep": {
					"$ref": "#/definitions/ElementDefinitionConstraintComponent"
				},
				"mappingFirstRep": {
					"$ref": "#/definitions/ElementDefinitionMappingComponent"
				},
				"maxLengthElement": {
					"$ref": "#/definitions/IntegerType"
				},
				"maxValueQuantity": {
					"$ref": "#/definitions/Quantity"
				},
				"isModifierElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"mustSupportElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"maxValuePositiveIntType": {
					"$ref": "#/definitions/PositiveIntType"
				},
				"maxValueDecimalType": {
					"$ref": "#/definitions/DecimalType"
				},
				"maxValueUnsignedIntType": {
					"$ref": "#/definitions/UnsignedIntType"
				},
				"typeFirstRep": {
					"$ref": "#/definitions/TypeRefComponent"
				},
				"minElement": {
					"$ref": "#/definitions/IntegerType"
				},
				"maxElement": {
					"$ref": "#/definitions/StringType"
				},
				"shortElement": {
					"$ref": "#/definitions/StringType"
				},
				"pathElement": {
					"$ref": "#/definitions/StringType"
				},
				"codeFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"labelElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionBaseComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"path": {
					"type": "string"
				},
				"min": {
					"type": "integer",
					"format": "int32"
				},
				"max": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"minElement": {
					"$ref": "#/definitions/IntegerType"
				},
				"maxElement": {
					"$ref": "#/definitions/StringType"
				},
				"pathElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionBindingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"strength": {
					"type": "string",
					"enum": ["REQUIRED", "EXTENSIBLE", "PREFERRED", "EXAMPLE", "NULL"]
				},
				"description": {
					"type": "string"
				},
				"valueSet": {
					"$ref": "#/definitions/Type"
				},
				"empty": {
					"type": "boolean"
				},
				"descriptionElement": {
					"$ref": "#/definitions/StringType"
				},
				"strengthElement": {
					"$ref": "#/definitions/EnumerationBindingStrength"
				},
				"valueSetReference": {
					"$ref": "#/definitions/Reference"
				},
				"valueSetUriType": {
					"$ref": "#/definitions/UriType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionConstraintComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"key": {
					"type": "string"
				},
				"requirements": {
					"type": "string"
				},
				"severity": {
					"type": "string",
					"enum": ["ERROR", "WARNING", "NULL"]
				},
				"human": {
					"type": "string"
				},
				"expression": {
					"type": "string"
				},
				"xpath": {
					"type": "string"
				},
				"source": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"severityElement": {
					"$ref": "#/definitions/EnumerationConstraintSeverity"
				},
				"expressionElement": {
					"$ref": "#/definitions/StringType"
				},
				"requirementsElement": {
					"$ref": "#/definitions/StringType"
				},
				"keyElement": {
					"$ref": "#/definitions/IdType"
				},
				"humanElement": {
					"$ref": "#/definitions/StringType"
				},
				"xpathElement": {
					"$ref": "#/definitions/StringType"
				},
				"sourceElement": {
					"$ref": "#/definitions/UriType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionExampleComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"label": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/Type"
				},
				"empty": {
					"type": "boolean"
				},
				"labelElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionMappingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identity": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"map": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"identityElement": {
					"$ref": "#/definitions/IdType"
				},
				"mapElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ElementDefinitionSlicingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"discriminator": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"description": {
					"type": "string"
				},
				"ordered": {
					"type": "boolean"
				},
				"rules": {
					"type": "string",
					"enum": ["CLOSED", "OPEN", "OPENATEND", "NULL"]
				},
				"empty": {
					"type": "boolean"
				},
				"descriptionElement": {
					"$ref": "#/definitions/StringType"
				},
				"orderedElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"rulesElement": {
					"$ref": "#/definitions/EnumerationSlicingRules"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumFactoryAggregationMode": {
			"type": "object"
		},
		"EnumFactoryBindingStrength": {
			"type": "object"
		},
		"EnumFactoryCapabilityStatementKind": {
			"type": "object"
		},
		"EnumFactoryConditionalDeleteStatus": {
			"type": "object"
		},
		"EnumFactoryConditionalReadStatus": {
			"type": "object"
		},
		"EnumFactoryConstraintSeverity": {
			"type": "object"
		},
		"EnumFactoryDocumentMode": {
			"type": "object"
		},
		"EnumFactoryEventCapabilityMode": {
			"type": "object"
		},
		"EnumFactoryExtensionContext": {
			"type": "object"
		},
		"EnumFactoryMessageSignificanceCategory": {
			"type": "object"
		},
		"EnumFactoryOperationKind": {
			"type": "object"
		},
		"EnumFactoryOperationParameterUse": {
			"type": "object"
		},
		"EnumFactoryPropertyRepresentation": {
			"type": "object"
		},
		"EnumFactoryPublicationStatus": {
			"type": "object"
		},
		"EnumFactoryQuantityComparator": {
			"type": "object"
		},
		"EnumFactoryReferenceHandlingPolicy": {
			"type": "object"
		},
		"EnumFactoryReferenceVersionRules": {
			"type": "object"
		},
		"EnumFactoryResourceVersionPolicy": {
			"type": "object"
		},
		"EnumFactoryRestfulCapabilityMode": {
			"type": "object"
		},
		"EnumFactorySearchParamType": {
			"type": "object"
		},
		"EnumFactorySlicingRules": {
			"type": "object"
		},
		"EnumFactoryStructureDefinitionKind": {
			"type": "object"
		},
		"EnumFactorySystemRestfulInteraction": {
			"type": "object"
		},
		"EnumFactoryTypeDerivationRule": {
			"type": "object"
		},
		"EnumFactoryTypeRestfulInteraction": {
			"type": "object"
		},
		"EnumFactoryUnknownContentCode": {
			"type": "object"
		},
		"EnumerationAggregationMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryAggregationMode"
				},
				"value": {
					"type": "string",
					"enum": ["CONTAINED", "REFERENCED", "BUNDLED", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationBindingStrength": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryBindingStrength"
				},
				"value": {
					"type": "string",
					"enum": ["REQUIRED", "EXTENSIBLE", "PREFERRED", "EXAMPLE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationCapabilityStatementKind": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryCapabilityStatementKind"
				},
				"value": {
					"type": "string",
					"enum": ["INSTANCE", "CAPABILITY", "REQUIREMENTS", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationConditionalDeleteStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryConditionalDeleteStatus"
				},
				"value": {
					"type": "string",
					"enum": ["NOTSUPPORTED", "SINGLE", "MULTIPLE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationConditionalReadStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryConditionalReadStatus"
				},
				"value": {
					"type": "string",
					"enum": ["NOTSUPPORTED", "MODIFIEDSINCE", "NOTMATCH", "FULLSUPPORT", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationConstraintSeverity": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryConstraintSeverity"
				},
				"value": {
					"type": "string",
					"enum": ["ERROR", "WARNING", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationDocumentMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryDocumentMode"
				},
				"value": {
					"type": "string",
					"enum": ["PRODUCER", "CONSUMER", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationEventCapabilityMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryEventCapabilityMode"
				},
				"value": {
					"type": "string",
					"enum": ["SENDER", "RECEIVER", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationExtensionContext": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryExtensionContext"
				},
				"value": {
					"type": "string",
					"enum": ["RESOURCE", "DATATYPE", "EXTENSION", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationMessageSignificanceCategory": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryMessageSignificanceCategory"
				},
				"value": {
					"type": "string",
					"enum": ["CONSEQUENCE", "CURRENCY", "NOTIFICATION", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationOperationKind": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryOperationKind"
				},
				"value": {
					"type": "string",
					"enum": ["OPERATION", "QUERY", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationOperationParameterUse": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryOperationParameterUse"
				},
				"value": {
					"type": "string",
					"enum": ["IN", "OUT", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationPropertyRepresentation": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryPropertyRepresentation"
				},
				"value": {
					"type": "string",
					"enum": ["XMLATTR", "XMLTEXT", "TYPEATTR", "CDATEXT", "XHTML", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationPublicationStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryPublicationStatus"
				},
				"value": {
					"type": "string",
					"enum": ["DRAFT", "ACTIVE", "RETIRED", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationQuantityComparator": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryQuantityComparator"
				},
				"value": {
					"type": "string",
					"enum": ["LESS_THAN", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationReferenceHandlingPolicy": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryReferenceHandlingPolicy"
				},
				"value": {
					"type": "string",
					"enum": ["LITERAL", "LOGICAL", "RESOLVES", "ENFORCED", "LOCAL", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationReferenceVersionRules": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryReferenceVersionRules"
				},
				"value": {
					"type": "string",
					"enum": ["EITHER", "INDEPENDENT", "SPECIFIC", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationResourceVersionPolicy": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryResourceVersionPolicy"
				},
				"value": {
					"type": "string",
					"enum": ["NOVERSION", "VERSIONED", "VERSIONEDUPDATE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationRestfulCapabilityMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryRestfulCapabilityMode"
				},
				"value": {
					"type": "string",
					"enum": ["CLIENT", "SERVER", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationSearchParamType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactorySearchParamType"
				},
				"value": {
					"type": "string",
					"enum": ["NUMBER", "DATE", "STRING", "TOKEN", "REFERENCE", "COMPOSITE", "QUANTITY", "URI", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationSlicingRules": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactorySlicingRules"
				},
				"value": {
					"type": "string",
					"enum": ["CLOSED", "OPEN", "OPENATEND", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationStructureDefinitionKind": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryStructureDefinitionKind"
				},
				"value": {
					"type": "string",
					"enum": ["PRIMITIVETYPE", "COMPLEXTYPE", "RESOURCE", "LOGICAL", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationSystemRestfulInteraction": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactorySystemRestfulInteraction"
				},
				"value": {
					"type": "string",
					"enum": ["TRANSACTION", "BATCH", "SEARCHSYSTEM", "HISTORYSYSTEM", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationTypeDerivationRule": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryTypeDerivationRule"
				},
				"value": {
					"type": "string",
					"enum": ["SPECIALIZATION", "CONSTRAINT", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationTypeRestfulInteraction": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryTypeRestfulInteraction"
				},
				"value": {
					"type": "string",
					"enum": ["READ", "VREAD", "UPDATE", "PATCH", "DELETE", "HISTORYINSTANCE", "HISTORYTYPE", "CREATE", "SEARCHTYPE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationUnknownContentCode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryUnknownContentCode"
				},
				"value": {
					"type": "string",
					"enum": ["NO", "EXTENSIONS", "ELEMENTS", "BOTH", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"MarkdownType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"valueNotNull": {
					"type": "string"
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"OperationDefinition": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"url": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["DRAFT", "ACTIVE", "RETIRED", "NULL"]
				},
				"experimental": {
					"type": "boolean"
				},
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"publisher": {
					"type": "string"
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactDetail"
					}
				},
				"useContext": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UsageContext"
					}
				},
				"jurisdiction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"description": {
					"type": "string"
				},
				"kind": {
					"type": "string",
					"enum": ["OPERATION", "QUERY", "NULL"]
				},
				"purpose": {
					"type": "string"
				},
				"idempotent": {
					"type": "boolean"
				},
				"code": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"base": {
					"$ref": "#/definitions/Reference"
				},
				"baseTarget": {
					"$ref": "#/definitions/OperationDefinition"
				},
				"resource": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeType"
					}
				},
				"system": {
					"type": "boolean"
				},
				"type": {
					"type": "boolean"
				},
				"instance": {
					"type": "boolean"
				},
				"parameter": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OperationDefinitionParameterComponent"
					}
				},
				"overload": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OperationDefinitionOverloadComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/ContactDetail"
				},
				"experimentalElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"descriptionElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"purposeElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"jurisdictionFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"publisherElement": {
					"$ref": "#/definitions/StringType"
				},
				"useContextFirstRep": {
					"$ref": "#/definitions/UsageContext"
				},
				"versionElement": {
					"$ref": "#/definitions/StringType"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"kindElement": {
					"$ref": "#/definitions/EnumerationOperationKind"
				},
				"statusElement": {
					"$ref": "#/definitions/EnumerationPublicationStatus"
				},
				"dateElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"typeElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"systemElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"codeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"parameterFirstRep": {
					"$ref": "#/definitions/OperationDefinitionParameterComponent"
				},
				"commentElement": {
					"$ref": "#/definitions/StringType"
				},
				"idempotentElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"instanceElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"overloadFirstRep": {
					"$ref": "#/definitions/OperationDefinitionOverloadComponent"
				},
				"titleElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"OperationDefinitionOverloadComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"parameterName": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"comment": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"commentElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"OperationDefinitionParameterBindingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"strength": {
					"type": "string",
					"enum": ["REQUIRED", "EXTENSIBLE", "PREFERRED", "EXAMPLE", "NULL"]
				},
				"valueSet": {
					"$ref": "#/definitions/Type"
				},
				"empty": {
					"type": "boolean"
				},
				"strengthElement": {
					"$ref": "#/definitions/EnumerationBindingStrength"
				},
				"valueSetReference": {
					"$ref": "#/definitions/Reference"
				},
				"valueSetUriType": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"OperationDefinitionParameterComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"name": {
					"type": "string"
				},
				"use": {
					"type": "string",
					"enum": ["IN", "OUT", "NULL"]
				},
				"min": {
					"type": "integer",
					"format": "int32"
				},
				"max": {
					"type": "string"
				},
				"documentation": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"searchType": {
					"type": "string",
					"enum": ["NUMBER", "DATE", "STRING", "TOKEN", "REFERENCE", "COMPOSITE", "QUANTITY", "URI", "NULL"]
				},
				"profile": {
					"$ref": "#/definitions/Reference"
				},
				"profileTarget": {
					"$ref": "#/definitions/StructureDefinition"
				},
				"binding": {
					"$ref": "#/definitions/OperationDefinitionParameterBindingComponent"
				},
				"part": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OperationDefinitionParameterComponent"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"partFirstRep": {
					"$ref": "#/definitions/OperationDefinitionParameterComponent"
				},
				"nameElement": {
					"$ref": "#/definitions/CodeType"
				},
				"typeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"searchTypeElement": {
					"$ref": "#/definitions/EnumerationSearchParamType"
				},
				"useElement": {
					"$ref": "#/definitions/EnumerationOperationParameterUse"
				},
				"minElement": {
					"$ref": "#/definitions/IntegerType"
				},
				"maxElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Quantity": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "number"
				},
				"comparator": {
					"type": "string",
					"enum": ["LESS_THAN", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "NULL"]
				},
				"unit": {
					"type": "string"
				},
				"system": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"comparatorElement": {
					"$ref": "#/definitions/EnumerationQuantityComparator"
				},
				"systemElement": {
					"$ref": "#/definitions/UriType"
				},
				"codeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"valueElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"unitElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Range": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"low": {
					"$ref": "#/definitions/SimpleQuantity"
				},
				"high": {
					"$ref": "#/definitions/SimpleQuantity"
				},
				"empty": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"ResourceInteractionComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"code": {
					"type": "string",
					"enum": ["READ", "VREAD", "UPDATE", "PATCH", "DELETE", "HISTORYINSTANCE", "HISTORYTYPE", "CREATE", "SEARCHTYPE", "NULL"]
				},
				"documentation": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"codeElement": {
					"$ref": "#/definitions/EnumerationTypeRestfulInteraction"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"SimpleQuantity": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"value": {
					"type": "number"
				},
				"comparator": {
					"type": "string",
					"enum": ["LESS_THAN", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "NULL"]
				},
				"unit": {
					"type": "string"
				},
				"system": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"comparatorElement": {
					"$ref": "#/definitions/EnumerationQuantityComparator"
				},
				"systemElement": {
					"$ref": "#/definitions/UriType"
				},
				"codeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"valueElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"unitElement": {
					"$ref": "#/definitions/StringType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"StructureDefinition": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"url": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["DRAFT", "ACTIVE", "RETIRED", "NULL"]
				},
				"experimental": {
					"type": "boolean"
				},
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"publisher": {
					"type": "string"
				},
				"contact": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactDetail"
					}
				},
				"useContext": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UsageContext"
					}
				},
				"jurisdiction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"description": {
					"type": "string"
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"purpose": {
					"type": "string"
				},
				"copyright": {
					"type": "string"
				},
				"keyword": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Coding"
					}
				},
				"fhirVersion": {
					"type": "string"
				},
				"mapping": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StructureDefinitionMappingComponent"
					}
				},
				"kind": {
					"type": "string",
					"enum": ["PRIMITIVETYPE", "COMPLEXTYPE", "RESOURCE", "LOGICAL", "NULL"]
				},
				"contextType": {
					"type": "string",
					"enum": ["RESOURCE", "DATATYPE", "EXTENSION", "NULL"]
				},
				"context": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"contextInvariant": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"type": {
					"type": "string"
				},
				"baseDefinition": {
					"type": "string"
				},
				"derivation": {
					"type": "string",
					"enum": ["SPECIALIZATION", "CONSTRAINT", "NULL"]
				},
				"snapshot": {
					"$ref": "#/definitions/StructureDefinitionSnapshotComponent"
				},
				"differential": {
					"$ref": "#/definitions/StructureDefinitionDifferentialComponent"
				},
				"empty": {
					"type": "boolean"
				},
				"abstractElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"abstract": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"contactFirstRep": {
					"$ref": "#/definitions/ContactDetail"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"experimentalElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"descriptionElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"purposeElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"copyrightElement": {
					"$ref": "#/definitions/MarkdownType"
				},
				"jurisdictionFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"publisherElement": {
					"$ref": "#/definitions/StringType"
				},
				"useContextFirstRep": {
					"$ref": "#/definitions/UsageContext"
				},
				"fhirVersionElement": {
					"$ref": "#/definitions/IdType"
				},
				"versionElement": {
					"$ref": "#/definitions/StringType"
				},
				"urlElement": {
					"$ref": "#/definitions/UriType"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"titleElement": {
					"$ref": "#/definitions/StringType"
				},
				"kindElement": {
					"$ref": "#/definitions/EnumerationStructureDefinitionKind"
				},
				"statusElement": {
					"$ref": "#/definitions/EnumerationPublicationStatus"
				},
				"dateElement": {
					"$ref": "#/definitions/DateTimeType"
				},
				"typeElement": {
					"$ref": "#/definitions/CodeType"
				},
				"contextTypeElement": {
					"$ref": "#/definitions/EnumerationExtensionContext"
				},
				"keywordFirstRep": {
					"$ref": "#/definitions/Coding"
				},
				"derivationElement": {
					"$ref": "#/definitions/EnumerationTypeDerivationRule"
				},
				"baseDefinitionElement": {
					"$ref": "#/definitions/UriType"
				},
				"mappingFirstRep": {
					"$ref": "#/definitions/StructureDefinitionMappingComponent"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"StructureDefinitionDifferentialComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"element": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ElementDefinition"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"elementFirstRep": {
					"$ref": "#/definitions/ElementDefinition"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"StructureDefinitionMappingComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identity": {
					"type": "string"
				},
				"uri": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"comments": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"nameElement": {
					"$ref": "#/definitions/StringType"
				},
				"identityElement": {
					"$ref": "#/definitions/IdType"
				},
				"commentsElement": {
					"$ref": "#/definitions/StringType"
				},
				"uriElement": {
					"$ref": "#/definitions/UriType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"StructureDefinitionSnapshotComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"element": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ElementDefinition"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"elementFirstRep": {
					"$ref": "#/definitions/ElementDefinition"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"SystemInteractionComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"code": {
					"type": "string",
					"enum": ["TRANSACTION", "BATCH", "SEARCHSYSTEM", "HISTORYSYSTEM", "NULL"]
				},
				"documentation": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"documentationElement": {
					"$ref": "#/definitions/StringType"
				},
				"codeElement": {
					"$ref": "#/definitions/EnumerationSystemRestfulInteraction"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"TimeType": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"primitive": {
					"type": "boolean"
				},
				"value": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"valueAsString": {
					"type": "string"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"TypeRefComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"code": {
					"type": "string"
				},
				"profile": {
					"type": "string"
				},
				"targetProfile": {
					"type": "string"
				},
				"aggregation": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumerationAggregationMode"
					}
				},
				"versioning": {
					"type": "string",
					"enum": ["EITHER", "INDEPENDENT", "SPECIFIC", "NULL"]
				},
				"empty": {
					"type": "boolean"
				},
				"codeElement": {
					"$ref": "#/definitions/UriType"
				},
				"versioningElement": {
					"$ref": "#/definitions/EnumerationReferenceVersionRules"
				},
				"profileElement": {
					"$ref": "#/definitions/UriType"
				},
				"targetProfileElement": {
					"$ref": "#/definitions/UriType"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"UsageContext": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"code": {
					"$ref": "#/definitions/Coding"
				},
				"value": {
					"$ref": "#/definitions/Type"
				},
				"empty": {
					"type": "boolean"
				},
				"valueCodeableConcept": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"valueQuantity": {
					"$ref": "#/definitions/Quantity"
				},
				"valueRange": {
					"$ref": "#/definitions/Range"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumFactoryDaysOfWeek": {
			"type": "object"
		},
		"EnumFactoryLocationMode": {
			"type": "object"
		},
		"EnumFactoryLocationStatus": {
			"type": "object"
		},
		"EnumerationDaysOfWeek": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryDaysOfWeek"
				},
				"value": {
					"type": "string",
					"enum": ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationLocationMode": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryLocationMode"
				},
				"value": {
					"type": "string",
					"enum": ["INSTANCE", "KIND", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"EnumerationLocationStatus": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"enumFactory": {
					"$ref": "#/definitions/EnumFactoryLocationStatus"
				},
				"value": {
					"type": "string",
					"enum": ["ACTIVE", "SUSPENDED", "INACTIVE", "NULL"]
				},
				"valueAsString": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"HealthcareService": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"active": {
					"type": "boolean"
				},
				"providedBy": {
					"$ref": "#/definitions/Reference"
				},
				"providedByTarget": {
					"$ref": "#/definitions/Organization"
				},
				"serviceCategory": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"serviceType": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"specialty": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"location": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"locationTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Location"
					}
				},
				"serviceName": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"extraDetails": {
					"type": "string"
				},
				"photo": {
					"$ref": "#/definitions/Attachment"
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"coverageArea": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"coverageAreaTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Location"
					}
				},
				"serviceProvisionCode": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"eligibility": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"eligibilityNote": {
					"type": "string"
				},
				"programName": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StringType"
					}
				},
				"characteristic": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"referralMethod": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"publicKey": {
					"type": "string"
				},
				"appointmentRequired": {
					"type": "boolean"
				},
				"availableTime": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HealthcareServiceAvailableTimeComponent"
					}
				},
				"notAvailable": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HealthcareServiceNotAvailableComponent"
					}
				},
				"availabilityExceptions": {
					"type": "string"
				},
				"endpoint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"endpointTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Endpoint"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"specialtyFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"locationFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"activeElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"serviceTypeFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"coverageAreaFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"serviceProvisionCodeFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"eligibilityNoteElement": {
					"$ref": "#/definitions/StringType"
				},
				"serviceNameElement": {
					"$ref": "#/definitions/StringType"
				},
				"extraDetailsElement": {
					"$ref": "#/definitions/StringType"
				},
				"appointmentRequiredElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"characteristicFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"availabilityExceptionsElement": {
					"$ref": "#/definitions/StringType"
				},
				"referralMethodFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"availableTimeFirstRep": {
					"$ref": "#/definitions/HealthcareServiceAvailableTimeComponent"
				},
				"notAvailableFirstRep": {
					"$ref": "#/definitions/HealthcareServiceNotAvailableComponent"
				},
				"commentElement": {
					"$ref": "#/definitions/StringType"
				},
				"publicKeyElement": {
					"$ref": "#/definitions/StringType"
				},
				"endpointFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"HealthcareServiceAvailableTimeComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"daysOfWeek": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumerationDaysOfWeek"
					}
				},
				"allDay": {
					"type": "boolean"
				},
				"availableStartTime": {
					"type": "string"
				},
				"availableEndTime": {
					"type": "string"
				},
				"empty": {
					"type": "boolean"
				},
				"availableStartTimeElement": {
					"$ref": "#/definitions/TimeType"
				},
				"availableEndTimeElement": {
					"$ref": "#/definitions/TimeType"
				},
				"allDayElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"HealthcareServiceNotAvailableComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"description": {
					"type": "string"
				},
				"during": {
					"$ref": "#/definitions/Period"
				},
				"empty": {
					"type": "boolean"
				},
				"descriptionElement": {
					"$ref": "#/definitions/StringType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"LocationPositionComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"longitude": {
					"type": "number"
				},
				"latitude": {
					"type": "number"
				},
				"altitude": {
					"type": "number"
				},
				"empty": {
					"type": "boolean"
				},
				"altitudeElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"longitudeElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"latitudeElement": {
					"$ref": "#/definitions/DecimalType"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"Practitioner": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"implicitRules": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"text": {
					"$ref": "#/definitions/Narrative"
				},
				"contained": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Resource"
					}
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"active": {
					"type": "boolean"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HumanName"
					}
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"address": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},
				"gender": {
					"type": "string",
					"enum": ["MALE", "FEMALE", "OTHER", "UNKNOWN", "NULL"]
				},
				"birthDate": {
					"type": "string",
					"format": "date-time"
				},
				"photo": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Attachment"
					}
				},
				"role": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PractitionerRoleComponent"
					}
				},
				"qualification": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PractitionerQualificationComponent"
					}
				},
				"communication": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"resourceType": {
					"type": "string",
					"enum": ["Account", "ActivityDefinition", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BodySite", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam", "Claim", "ClaimResponse", "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest", "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract", "Coverage", "DataElement", "DetectedIssue", "Device", "DeviceComponent", "DeviceMetric", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticReport", "DiagnosticRequest", "DocumentManifest", "DocumentReference", "EligibilityRequest", "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse", "EpisodeOfCare", "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest", "ImagingStudy", "Immunization", "ImmunizationRecommendation", "ImplementationGuide", "Library", "Linkage", "List", "Location", "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MessageDefinition", "MessageHeader", "NamingSystem", "NutritionRequest", "Observation", "OperationDefinition", "OperationOutcome", "Organization", "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition", "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest", "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchStudy", "ResearchSubject", "RiskAssessment", "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "Slot", "Specimen", "StructureDefinition", "StructureMap", "Subscription", "Substance", "SupplyDelivery", "SupplyRequest", "Task", "TestReport", "TestScript", "ValueSet", "VisionPrescription"]
				},
				"addressFirstRep": {
					"$ref": "#/definitions/Address"
				},
				"communicationFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"birthDateElement": {
					"$ref": "#/definitions/DateType"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"qualificationFirstRep": {
					"$ref": "#/definitions/PractitionerQualificationComponent"
				},
				"activeElement": {
					"$ref": "#/definitions/BooleanType"
				},
				"nameFirstRep": {
					"$ref": "#/definitions/HumanName"
				},
				"genderElement": {
					"$ref": "#/definitions/EnumerationAdministrativeGender"
				},
				"photoFirstRep": {
					"$ref": "#/definitions/Attachment"
				},
				"roleFirstRep": {
					"$ref": "#/definitions/PractitionerRoleComponent"
				},
				"idElement": {
					"$ref": "#/definitions/IdType"
				},
				"languageElement": {
					"$ref": "#/definitions/CodeType"
				},
				"structureFhirVersionEnum": {
					"type": "string",
					"enum": ["DSTU1", "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3"]
				},
				"implicitRulesElement": {
					"$ref": "#/definitions/UriType"
				},
				"idBase": {
					"type": "string"
				},
				"resource": {
					"type": "boolean"
				},
				"primitive": {
					"type": "boolean"
				}
			}
		},
		"PractitionerQualificationComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"code": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"issuer": {
					"$ref": "#/definitions/Reference"
				},
				"issuerTarget": {
					"$ref": "#/definitions/Organization"
				},
				"empty": {
					"type": "boolean"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		},
		"PractitionerRoleComponent": {
			"type": "object",
			"properties": {
				"formatCommentsPre": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"formatCommentsPost": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"extension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"modifierExtension": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Extension"
					}
				},
				"organization": {
					"$ref": "#/definitions/Reference"
				},
				"organizationTarget": {
					"$ref": "#/definitions/Organization"
				},
				"code": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"specialty": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CodeableConcept"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Identifier"
					}
				},
				"telecom": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContactPoint"
					}
				},
				"period": {
					"$ref": "#/definitions/Period"
				},
				"location": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"locationTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Location"
					}
				},
				"healthcareService": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"healthcareServiceTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HealthcareService"
					}
				},
				"endpoint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Reference"
					}
				},
				"endpointTarget": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Endpoint"
					}
				},
				"empty": {
					"type": "boolean"
				},
				"healthcareServiceFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"specialtyFirstRep": {
					"$ref": "#/definitions/CodeableConcept"
				},
				"locationFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"telecomFirstRep": {
					"$ref": "#/definitions/ContactPoint"
				},
				"identifierFirstRep": {
					"$ref": "#/definitions/Identifier"
				},
				"endpointFirstRep": {
					"$ref": "#/definitions/Reference"
				},
				"modifierExtensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"idElement": {
					"$ref": "#/definitions/StringType"
				},
				"idBase": {
					"type": "string"
				},
				"extensionFirstRep": {
					"$ref": "#/definitions/Extension"
				},
				"primitive": {
					"type": "boolean"
				},
				"resource": {
					"type": "boolean"
				}
			}
		}
	}
}