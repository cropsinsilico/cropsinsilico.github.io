---
swagger: "2.0"
info:
  description: "This is the API specification for the [Crops in Silico](http://cropsinsilico.org/) project. This documentation was generated using [Swagger](http://swagger.io)."
  version: "0.1.3"
  title: "Crops in Silico API"
  termsOfService: "https://www.wikihow.com/Write-Terms-and-Conditions"
  contact:
    email: "lambert8@illinois.edu"
  license:
    name: "BSD-3"
    url: "https://opensource.org/licenses/BSD-3-Clause"
host: "proto.cis.ndslabs.org"
basePath: "/api/v1"
tags:
- name: "models"
  description: "Retrieve server data (static)"
  externalDocs:
    description: "Find out more"
    url: "https://cropsinsilico.github.io/cis_interface/"
- name: "graphs"
  description: "Submit client data (dynamic)"
schemes:
- "https"
paths:
  /models:
    get:
      tags:
      - "models"
      summary: "Retrieve a list of all available models in the system"
      description: ""
      operationId: "get_models"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Model"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /graphs:
    post:
      tags:
      - "graphs"
      summary: "Formats and returns a YAML file for running the Graph in cisrun"
      description: ""
      operationId: "post_graphs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A new graph of models to run"
        required: true
        schema:
          $ref: "#/definitions/Graph"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
        500:
          description: "Server error"
      x-swagger-router-controller: "swagger_server.controllers.graphs_controller"
  /simulations:
    post:
      tags:
      - "simulations"
      summary: "Create a new simulation"
      description: ""
      operationId: "post_simulations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A new set of simulation models to run"
        required: true
        schema:
          $ref: "#/definitions/Simulation"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
        500:
          description: "Server error"
      deprecated: true
      x-swagger-router-controller: "swagger_server.controllers.simulations_controller"
definitions:
  Model:
    type: "object"
    required:
    - "args"
    - "driver"
    - "id"
    - "inputs"
    - "name"
    - "outputs"
    properties:
      id:
        type: "integer"
        description: "The primary key for this model"
      name:
        type: "string"
        description: "The short name / identifier of this model"
      description:
        type: "string"
        description: "Long name / description of this model"
      driver:
        $ref: "#/definitions/ModelDriver"
      args:
        type: "string"
        description: "Path to the model source code on disk"
      client_of:
        type: "string"
        description: "Denotes that the model is the client in some context"
      is_server:
        type: "string"
        description: "Denotes that the model is the server in some context"
      inputs:
        type: "array"
        description: "Input Coms associated with this Model"
        items:
          $ref: "#/definitions/Com"
      outputs:
        type: "array"
        description: "Output Coms associated with this Model"
        items:
          $ref: "#/definitions/Com"
    description: "Represents a unit that can be run by the system"
    example:
      args: "args"
      outputs:
      - name: "name"
        model_id: "model_id"
      - name: "name"
        model_id: "model_id"
      is_server: "is_server"
      driver: {}
      inputs:
      - name: "name"
        model_id: "model_id"
      - name: "name"
        model_id: "model_id"
      name: "name"
      description: "description"
      client_of: "client_of"
      id: 0
  Com:
    type: "object"
    required:
    - "model_id"
    - "name"
    properties:
      name:
        type: "string"
        description: "The (unique) name of the Com"
      model_id:
        type: "string"
        description: "The id of the model that the Com is part of"
      node_id:
        type: "string"
        description: "The id of the node instance that the Com is part of"
    description: "Represents one input or output of a Model"
    example:
      name: "name"
      model_id: "model_id"
  Graph:
    type: "object"
    required:
    - "edges"
    - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/Node"
      edges:
        type: "array"
        items:
          $ref: "#/definitions/Edge"
    description: "Represents the current state of a user's canvas"
    example:
      nodes:
      - outputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        inputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        name: "name"
        description: "description"
        model:
          args: "args"
          outputs:
          - name: "name"
            model_id: "model_id"
          - name: "name"
            model_id: "model_id"
          is_server: "is_server"
          driver: {}
          inputs:
          - name: "name"
            model_id: "model_id"
          - name: "name"
            model_id: "model_id"
          name: "name"
          description: "description"
          client_of: "client_of"
          id: 0
        id: 0
      - outputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        inputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        name: "name"
        description: "description"
        model:
          args: "args"
          outputs:
          - name: "name"
            model_id: "model_id"
          - name: "name"
            model_id: "model_id"
          is_server: "is_server"
          driver: {}
          inputs:
          - name: "name"
            model_id: "model_id"
          - name: "name"
            model_id: "model_id"
          name: "name"
          description: "description"
          client_of: "client_of"
          id: 0
        id: 0
      edges:
      - args: "args"
        name: "name"
        from:
          name: "name"
          model_id: "model_id"
        id: 6
        to:
          name: "name"
          model_id: "model_id"
        type: {}
        operation: "operation"
      - args: "args"
        name: "name"
        from:
          name: "name"
          model_id: "model_id"
        id: 6
        to:
          name: "name"
          model_id: "model_id"
        type: {}
        operation: "operation"
  Node:
    type: "object"
    required:
    - "inputs"
    - "model"
    - "name"
    - "outputs"
    properties:
      id:
        type: "integer"
        description: "The primary key for this node"
      model:
        $ref: "#/definitions/Model"
      name:
        type: "string"
        description: "A label for this node"
      description:
        type: "string"
        description: "A longer description for this node"
      inputs:
        type: "array"
        description: "Input Coms associated with this Node"
        items:
          $ref: "#/definitions/Com"
      outputs:
        type: "array"
        description: "Output Coms associated with this Node"
        items:
          $ref: "#/definitions/Com"
    description: "Represents a node on the user's canvas"
    example:
      outputs:
      - name: "name"
        model_id: "model_id"
      - name: "name"
        model_id: "model_id"
      inputs:
      - name: "name"
        model_id: "model_id"
      - name: "name"
        model_id: "model_id"
      name: "name"
      description: "description"
      model:
        args: "args"
        outputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        is_server: "is_server"
        driver: {}
        inputs:
        - name: "name"
          model_id: "model_id"
        - name: "name"
          model_id: "model_id"
        name: "name"
        description: "description"
        client_of: "client_of"
        id: 0
      id: 0
  Edge:
    type: "object"
    required:
    - "args"
    - "destination"
    - "name"
    - "source"
    - "type"
    properties:
      id:
        type: "integer"
        description: "The primary key for this edge"
      name:
        type: "string"
        description: "A label for this edge"
      args:
        type: "string"
        description: "The queue name or file name to use (depends on 'type')"
      type:
        $ref: "#/definitions/EdgeType"
      destination:
        $ref: "#/definitions/Com"
      source:
        $ref: "#/definitions/Com"
      operation:
        type: "string"
    description: "Represents a connection from an input Com of a Node to an output Com"
    example:
      args: "args"
      name: "name"
      from:
        name: "name"
        model_id: "model_id"
      id: 6
      to:
        name: "name"
        model_id: "model_id"
      type: {}
      operation: "operation"
  ModelDriver:
    type: "string"
    description: "The driver to use for running a particular model"
    enum:
    - "GCCModelDriver"
    - "PythonModelDriver"
    - "MatlabModelDriver"
  EdgeType:
    type: "string"
    description: "The driver to use for this input / output Com"
    enum:
    - "File"
    - "AsciiFile"
    - "AsciiTable"
    - "AsciiTableArray"
    - "PickleFile"
    - "MatFile"
    - "RMQ"
    - "ZMQ"
  Simulation:
    type: "object"
    properties:
      models:
        type: "array"
        items:
          $ref: "#/definitions/LegacyModel"
      namespace:
        type: "string"
    example:
      models:
      - name: "name"
        path: "path"
      - name: "name"
        path: "path"
      namespace: "namespace"
  LegacyModel:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The short name / identifier of this model"
      path:
        type: "string"
        description: "Path to the YAML file on disk representing this model"
    example:
      name: "name"
      path: "path"
externalDocs:
  description: "Find out more about Crops in Silico"
  url: "http://cropsinsilico.org/about-us/"
